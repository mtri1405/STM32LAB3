
STM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002754  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028cc  080028cc  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080028cc  080028cc  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028cc  080028cc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080028d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000050  08002924  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002924  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d233  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226b  00000000  00000000  0002d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00030018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dd8  00000000  00000000  00030a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca4b  00000000  00000000  000487d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086194  00000000  00000000  00055223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db3b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac0  00000000  00000000  000db40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002848 	.word	0x08002848

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002848 	.word	0x08002848

0800014c <display7SEG>:
Seg1_e_Pin, Seg1_f_Pin, Seg1_g_Pin };

uint16_t segPins_B[7] = { Seg2_a_Pin, Seg2_b_Pin, Seg2_c_Pin, Seg2_d_Pin,
Seg2_e_Pin, Seg2_f_Pin, Seg2_g_Pin };

void display7SEG(int num, uint16_t *segPins) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]

	if (num < 0 || num > 9)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2b00      	cmp	r3, #0
 800015a:	db02      	blt.n	8000162 <display7SEG+0x16>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b09      	cmp	r3, #9
 8000160:	dd01      	ble.n	8000166 <display7SEG+0x1a>
		num = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 7; i++) {
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
 800016a:	e019      	b.n	80001a0 <display7SEG+0x54>
		HAL_GPIO_WritePin(GPIOB, segPins[i],
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	683a      	ldr	r2, [r7, #0]
 8000172:	4413      	add	r3, r2
 8000174:	8819      	ldrh	r1, [r3, #0]
				seg_pattern[num][i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000176:	480e      	ldr	r0, [pc, #56]	; (80001b0 <display7SEG+0x64>)
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	4613      	mov	r3, r2
 800017c:	00db      	lsls	r3, r3, #3
 800017e:	1a9b      	subs	r3, r3, r2
 8000180:	18c2      	adds	r2, r0, r3
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, segPins[i],
 8000188:	2b00      	cmp	r3, #0
 800018a:	bf14      	ite	ne
 800018c:	2301      	movne	r3, #1
 800018e:	2300      	moveq	r3, #0
 8000190:	b2db      	uxtb	r3, r3
 8000192:	461a      	mov	r2, r3
 8000194:	4807      	ldr	r0, [pc, #28]	; (80001b4 <display7SEG+0x68>)
 8000196:	f001 fb42 	bl	800181e <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	3301      	adds	r3, #1
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	2b06      	cmp	r3, #6
 80001a4:	dde2      	ble.n	800016c <display7SEG+0x20>
	}
}
 80001a6:	bf00      	nop
 80001a8:	bf00      	nop
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	08002860 	.word	0x08002860
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <update7SEG>:

void update7SEG(int duration, int mode) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	6039      	str	r1, [r7, #0]
	if (actions[TIME_SEGMENT].timer_flag == 1) {
 80001c2:	4b35      	ldr	r3, [pc, #212]	; (8000298 <update7SEG+0xe0>)
 80001c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d161      	bne.n	800028e <update7SEG+0xd6>
		static int state = 0;

		int tensA = duration / 10;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4a33      	ldr	r2, [pc, #204]	; (800029c <update7SEG+0xe4>)
 80001ce:	fb82 1203 	smull	r1, r2, r2, r3
 80001d2:	1092      	asrs	r2, r2, #2
 80001d4:	17db      	asrs	r3, r3, #31
 80001d6:	1ad3      	subs	r3, r2, r3
 80001d8:	617b      	str	r3, [r7, #20]
		int onesA = duration % 10;
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4b2f      	ldr	r3, [pc, #188]	; (800029c <update7SEG+0xe4>)
 80001de:	fb83 1302 	smull	r1, r3, r3, r2
 80001e2:	1099      	asrs	r1, r3, #2
 80001e4:	17d3      	asrs	r3, r2, #31
 80001e6:	1ac9      	subs	r1, r1, r3
 80001e8:	460b      	mov	r3, r1
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	440b      	add	r3, r1
 80001ee:	005b      	lsls	r3, r3, #1
 80001f0:	1ad3      	subs	r3, r2, r3
 80001f2:	613b      	str	r3, [r7, #16]

		int tensB = mode / 10;
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	4a29      	ldr	r2, [pc, #164]	; (800029c <update7SEG+0xe4>)
 80001f8:	fb82 1203 	smull	r1, r2, r2, r3
 80001fc:	1092      	asrs	r2, r2, #2
 80001fe:	17db      	asrs	r3, r3, #31
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	60fb      	str	r3, [r7, #12]
		int onesB = mode % 10;
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	4b25      	ldr	r3, [pc, #148]	; (800029c <update7SEG+0xe4>)
 8000208:	fb83 1302 	smull	r1, r3, r3, r2
 800020c:	1099      	asrs	r1, r3, #2
 800020e:	17d3      	asrs	r3, r2, #31
 8000210:	1ac9      	subs	r1, r1, r3
 8000212:	460b      	mov	r3, r1
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	440b      	add	r3, r1
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	1ad3      	subs	r3, r2, r3
 800021c:	60bb      	str	r3, [r7, #8]

		if (state == 1) {
 800021e:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <update7SEG+0xe8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d113      	bne.n	800024e <update7SEG+0x96>
			// Display Ten digits
			HAL_GPIO_WritePin(GPIOA, EN_A_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2110      	movs	r1, #16
 800022a:	481e      	ldr	r0, [pc, #120]	; (80002a4 <update7SEG+0xec>)
 800022c:	f001 faf7 	bl	800181e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN_B_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000236:	481b      	ldr	r0, [pc, #108]	; (80002a4 <update7SEG+0xec>)
 8000238:	f001 faf1 	bl	800181e <HAL_GPIO_WritePin>
			display7SEG(tensA, segPins_A);
 800023c:	491a      	ldr	r1, [pc, #104]	; (80002a8 <update7SEG+0xf0>)
 800023e:	6978      	ldr	r0, [r7, #20]
 8000240:	f7ff ff84 	bl	800014c <display7SEG>
			display7SEG(tensB, segPins_B);
 8000244:	4919      	ldr	r1, [pc, #100]	; (80002ac <update7SEG+0xf4>)
 8000246:	68f8      	ldr	r0, [r7, #12]
 8000248:	f7ff ff80 	bl	800014c <display7SEG>
 800024c:	e016      	b.n	800027c <update7SEG+0xc4>
		} else if (state == 0) {
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <update7SEG+0xe8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d112      	bne.n	800027c <update7SEG+0xc4>
			// Display One digits
			HAL_GPIO_WritePin(GPIOA, EN_A_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2110      	movs	r1, #16
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <update7SEG+0xec>)
 800025c:	f001 fadf 	bl	800181e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN_B_Pin, GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000266:	480f      	ldr	r0, [pc, #60]	; (80002a4 <update7SEG+0xec>)
 8000268:	f001 fad9 	bl	800181e <HAL_GPIO_WritePin>
			display7SEG(onesA, segPins_A);
 800026c:	490e      	ldr	r1, [pc, #56]	; (80002a8 <update7SEG+0xf0>)
 800026e:	6938      	ldr	r0, [r7, #16]
 8000270:	f7ff ff6c 	bl	800014c <display7SEG>
			display7SEG(onesB, segPins_B);
 8000274:	490d      	ldr	r1, [pc, #52]	; (80002ac <update7SEG+0xf4>)
 8000276:	68b8      	ldr	r0, [r7, #8]
 8000278:	f7ff ff68 	bl	800014c <display7SEG>
		}
		state = 1 - state; // Change state
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <update7SEG+0xe8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f1c3 0301 	rsb	r3, r3, #1
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <update7SEG+0xe8>)
 8000286:	6013      	str	r3, [r2, #0]
		reset(TIME_SEGMENT);
 8000288:	2003      	movs	r0, #3
 800028a:	f000 ff33 	bl	80010f4 <reset>
	}
}
 800028e:	bf00      	nop
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000140 	.word	0x20000140
 800029c:	66666667 	.word	0x66666667
 80002a0:	2000006c 	.word	0x2000006c
 80002a4:	40010800 	.word	0x40010800
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000010 	.word	0x20000010

080002b0 <isButtonPress>:

// Declare number of button
keyInput button[NO_BUTTON];

//
int isButtonPress(int idx) {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	if (idx > NO_BUTTON || idx < 0) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	dc02      	bgt.n	80002c4 <isButtonPress+0x14>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	da02      	bge.n	80002ca <isButtonPress+0x1a>
		return -1;
 80002c4:	f04f 33ff 	mov.w	r3, #4294967295
 80002c8:	e017      	b.n	80002fa <isButtonPress+0x4a>
	} else {
		if (button[idx].flag == 1) {
 80002ca:	490e      	ldr	r1, [pc, #56]	; (8000304 <isButtonPress+0x54>)
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4613      	mov	r3, r2
 80002d0:	00db      	lsls	r3, r3, #3
 80002d2:	1a9b      	subs	r3, r3, r2
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	440b      	add	r3, r1
 80002d8:	3314      	adds	r3, #20
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d10b      	bne.n	80002f8 <isButtonPress+0x48>
			button[idx].flag = 0;
 80002e0:	4908      	ldr	r1, [pc, #32]	; (8000304 <isButtonPress+0x54>)
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	4613      	mov	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	1a9b      	subs	r3, r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	440b      	add	r3, r1
 80002ee:	3314      	adds	r3, #20
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
			return 1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	e000      	b.n	80002fa <isButtonPress+0x4a>
		}
	}
	return 0;
 80002f8:	2300      	movs	r3, #0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	20000084 	.word	0x20000084

08000308 <isModePress>:
		}
	}
	return 0;
}
// Kiểm tra MODE button
int isModePress() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	return isButtonPress(MODE);
 800030c:	2000      	movs	r0, #0
 800030e:	f7ff ffcf 	bl	80002b0 <isButtonPress>
 8000312:	4603      	mov	r3, r0
}
 8000314:	4618      	mov	r0, r3
 8000316:	bd80      	pop	{r7, pc}

08000318 <isTimePress>:
int isModeHold() {
	return isButtonHolding(MODE);
}

// Kiểm tra TIME button
int isTimePress() {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	return isButtonPress(TIME);
 800031c:	2001      	movs	r0, #1
 800031e:	f7ff ffc7 	bl	80002b0 <isButtonPress>
 8000322:	4603      	mov	r3, r0
}
 8000324:	4618      	mov	r0, r3
 8000326:	bd80      	pop	{r7, pc}

08000328 <isSetPress>:
int isTimeHold() {
	return isButtonHolding(TIME);
}

// Kiểm tra SET button
int isSetPress() {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	return isButtonPress(SET);
 800032c:	2002      	movs	r0, #2
 800032e:	f7ff ffbf 	bl	80002b0 <isButtonPress>
 8000332:	4603      	mov	r3, r0
}
 8000334:	4618      	mov	r0, r3
 8000336:	bd80      	pop	{r7, pc}

08000338 <isControlPress>:
int isSetHold() {
	return isButtonHolding(SET);
}

// Kiểm tra Control button
int isControlPress(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	return isButtonPress(CONTROL);
 800033c:	2003      	movs	r0, #3
 800033e:	f7ff ffb7 	bl	80002b0 <isButtonPress>
 8000342:	4603      	mov	r3, r0
}
 8000344:	4618      	mov	r0, r3
 8000346:	bd80      	pop	{r7, pc}

08000348 <getKeyInput>:
void getKeyInput() {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_BUTTON; i++) {
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e0f8      	b.n	8000546 <getKeyInput+0x1fe>
		// shifting the button registry history
		button[i].KeyReg2 = button[i].KeyReg1;
 8000354:	4980      	ldr	r1, [pc, #512]	; (8000558 <getKeyInput+0x210>)
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	1a9b      	subs	r3, r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	440b      	add	r3, r1
 8000362:	3304      	adds	r3, #4
 8000364:	6819      	ldr	r1, [r3, #0]
 8000366:	487c      	ldr	r0, [pc, #496]	; (8000558 <getKeyInput+0x210>)
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4613      	mov	r3, r2
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4403      	add	r3, r0
 8000374:	3308      	adds	r3, #8
 8000376:	6019      	str	r1, [r3, #0]
		button[i].KeyReg1 = button[i].KeyReg0;
 8000378:	4977      	ldr	r1, [pc, #476]	; (8000558 <getKeyInput+0x210>)
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	4613      	mov	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	1a9b      	subs	r3, r3, r2
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	440b      	add	r3, r1
 8000386:	6819      	ldr	r1, [r3, #0]
 8000388:	4873      	ldr	r0, [pc, #460]	; (8000558 <getKeyInput+0x210>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4613      	mov	r3, r2
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4403      	add	r3, r0
 8000396:	3304      	adds	r3, #4
 8000398:	6019      	str	r1, [r3, #0]
		// Read current button state from hardware pin
		button[i].KeyReg0 = HAL_GPIO_ReadPin(GPIOA, pin_of_buttons[i]);
 800039a:	4a70      	ldr	r2, [pc, #448]	; (800055c <getKeyInput+0x214>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a2:	4619      	mov	r1, r3
 80003a4:	486e      	ldr	r0, [pc, #440]	; (8000560 <getKeyInput+0x218>)
 80003a6:	f001 fa23 	bl	80017f0 <HAL_GPIO_ReadPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4618      	mov	r0, r3
 80003ae:	496a      	ldr	r1, [pc, #424]	; (8000558 <getKeyInput+0x210>)
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4613      	mov	r3, r2
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	440b      	add	r3, r1
 80003bc:	6018      	str	r0, [r3, #0]

		// Checking button state is stable for 3 read
		if ((button[i].KeyReg0 == button[i].KeyReg1)
 80003be:	4966      	ldr	r1, [pc, #408]	; (8000558 <getKeyInput+0x210>)
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	440b      	add	r3, r1
 80003cc:	6819      	ldr	r1, [r3, #0]
 80003ce:	4862      	ldr	r0, [pc, #392]	; (8000558 <getKeyInput+0x210>)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4613      	mov	r3, r2
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4403      	add	r3, r0
 80003dc:	3304      	adds	r3, #4
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4299      	cmp	r1, r3
 80003e2:	f040 80ad 	bne.w	8000540 <getKeyInput+0x1f8>
				&& (button[i].KeyReg1 == button[i].KeyReg2)) {
 80003e6:	495c      	ldr	r1, [pc, #368]	; (8000558 <getKeyInput+0x210>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	4613      	mov	r3, r2
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	440b      	add	r3, r1
 80003f4:	3304      	adds	r3, #4
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	4857      	ldr	r0, [pc, #348]	; (8000558 <getKeyInput+0x210>)
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4613      	mov	r3, r2
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4403      	add	r3, r0
 8000406:	3308      	adds	r3, #8
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4299      	cmp	r1, r3
 800040c:	f040 8098 	bne.w	8000540 <getKeyInput+0x1f8>
			//	Detect any change compare to the previous history state
			if (button[i].KeyReg2 != button[i].KeyReg3) {
 8000410:	4951      	ldr	r1, [pc, #324]	; (8000558 <getKeyInput+0x210>)
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	4613      	mov	r3, r2
 8000416:	00db      	lsls	r3, r3, #3
 8000418:	1a9b      	subs	r3, r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	440b      	add	r3, r1
 800041e:	3308      	adds	r3, #8
 8000420:	6819      	ldr	r1, [r3, #0]
 8000422:	484d      	ldr	r0, [pc, #308]	; (8000558 <getKeyInput+0x210>)
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4613      	mov	r3, r2
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4403      	add	r3, r0
 8000430:	330c      	adds	r3, #12
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4299      	cmp	r1, r3
 8000436:	d031      	beq.n	800049c <getKeyInput+0x154>
				button[i].KeyReg3 = button[i].KeyReg2;
 8000438:	4947      	ldr	r1, [pc, #284]	; (8000558 <getKeyInput+0x210>)
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	4613      	mov	r3, r2
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	440b      	add	r3, r1
 8000446:	3308      	adds	r3, #8
 8000448:	6819      	ldr	r1, [r3, #0]
 800044a:	4843      	ldr	r0, [pc, #268]	; (8000558 <getKeyInput+0x210>)
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	4613      	mov	r3, r2
 8000450:	00db      	lsls	r3, r3, #3
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4403      	add	r3, r0
 8000458:	330c      	adds	r3, #12
 800045a:	6019      	str	r1, [r3, #0]

				//	If button is press, set flag to 1 and start counting for long press timer
				if (button[i].KeyReg3 == PRESS_STATE) {
 800045c:	493e      	ldr	r1, [pc, #248]	; (8000558 <getKeyInput+0x210>)
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	4613      	mov	r3, r2
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	440b      	add	r3, r1
 800046a:	330c      	adds	r3, #12
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d166      	bne.n	8000540 <getKeyInput+0x1f8>
					button[i].timeLongPress = timeOutForKeyPress;
 8000472:	4939      	ldr	r1, [pc, #228]	; (8000558 <getKeyInput+0x210>)
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	4613      	mov	r3, r2
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	440b      	add	r3, r1
 8000480:	3310      	adds	r3, #16
 8000482:	2232      	movs	r2, #50	; 0x32
 8000484:	601a      	str	r2, [r3, #0]
					button[i].flag = 1;
 8000486:	4934      	ldr	r1, [pc, #208]	; (8000558 <getKeyInput+0x210>)
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	4613      	mov	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	440b      	add	r3, r1
 8000494:	3314      	adds	r3, #20
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	e051      	b.n	8000540 <getKeyInput+0x1f8>
				}
			} else {
				if (button[i].KeyReg3 == PRESS_STATE) {
 800049c:	492e      	ldr	r1, [pc, #184]	; (8000558 <getKeyInput+0x210>)
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	4613      	mov	r3, r2
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	1a9b      	subs	r3, r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	440b      	add	r3, r1
 80004aa:	330c      	adds	r3, #12
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d13c      	bne.n	800052c <getKeyInput+0x1e4>
					button[i].timeLongPress--;
 80004b2:	4929      	ldr	r1, [pc, #164]	; (8000558 <getKeyInput+0x210>)
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	4613      	mov	r3, r2
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	1a9b      	subs	r3, r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	440b      	add	r3, r1
 80004c0:	3310      	adds	r3, #16
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1e59      	subs	r1, r3, #1
 80004c6:	4824      	ldr	r0, [pc, #144]	; (8000558 <getKeyInput+0x210>)
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4613      	mov	r3, r2
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4403      	add	r3, r0
 80004d4:	3310      	adds	r3, #16
 80004d6:	6019      	str	r1, [r3, #0]
					if (button[i].timeLongPress <= 0) {
 80004d8:	491f      	ldr	r1, [pc, #124]	; (8000558 <getKeyInput+0x210>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4613      	mov	r3, r2
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	1a9b      	subs	r3, r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	440b      	add	r3, r1
 80004e6:	3310      	adds	r3, #16
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dc28      	bgt.n	8000540 <getKeyInput+0x1f8>
						button[i].timeLongPress = timeOutForKeyPress;
 80004ee:	491a      	ldr	r1, [pc, #104]	; (8000558 <getKeyInput+0x210>)
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4613      	mov	r3, r2
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	440b      	add	r3, r1
 80004fc:	3310      	adds	r3, #16
 80004fe:	2232      	movs	r2, #50	; 0x32
 8000500:	601a      	str	r2, [r3, #0]
						button[i].flag = 1;
 8000502:	4915      	ldr	r1, [pc, #84]	; (8000558 <getKeyInput+0x210>)
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4613      	mov	r3, r2
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	3314      	adds	r3, #20
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
						button[i].isHoldingFlag = 1;
 8000516:	4910      	ldr	r1, [pc, #64]	; (8000558 <getKeyInput+0x210>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	1a9b      	subs	r3, r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	3318      	adds	r3, #24
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e009      	b.n	8000540 <getKeyInput+0x1f8>
					}
				} else {
					button[i].isHoldingFlag = 0;
 800052c:	490a      	ldr	r1, [pc, #40]	; (8000558 <getKeyInput+0x210>)
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4613      	mov	r3, r2
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	440b      	add	r3, r1
 800053a:	3318      	adds	r3, #24
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NO_BUTTON; i++) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3301      	adds	r3, #1
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b03      	cmp	r3, #3
 800054a:	f77f af03 	ble.w	8000354 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000084 	.word	0x20000084
 800055c:	20000020 	.word	0x20000020
 8000560:	40010800 	.word	0x40010800

08000564 <handle_auto_events>:
int lane2 = 0;

/*------------------------------------------------
 * Hàm xử lý các sự kiện chung (button, timer)
 *------------------------------------------------*/
void handle_auto_events() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    // 1. Nhấn Mode → chuyển sang Manual Mode
    if (isModePress()) {
 8000568:	f7ff fece 	bl	8000308 <isModePress>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <handle_auto_events+0x1a>
        admin_mode = MANUAL_MODE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <handle_auto_events+0x64>)
 8000574:	2202      	movs	r2, #2
 8000576:	601a      	str	r2, [r3, #0]
        init_fsm_manual();
 8000578:	f000 f970 	bl	800085c <init_fsm_manual>
        return;
 800057c:	e022      	b.n	80005c4 <handle_auto_events+0x60>
    }

    // 2. Nhấp nháy đèn hệ thống (System LED)
    if (actions[SYSTEM_LED].timer_flag) {
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <handle_auto_events+0x68>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d005      	beq.n	8000592 <handle_auto_events+0x2e>
        toggle_LED(LED_SYS);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fb34 	bl	8000bf4 <toggle_LED>
        reset(SYSTEM_LED);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fdb1 	bl	80010f4 <reset>
    }

    // 3. Cập nhật mỗi giây → giảm timer cho 2 làn
    if (actions[ONE_SECOND].timer_flag) {
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <handle_auto_events+0x68>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d014      	beq.n	80005c4 <handle_auto_events+0x60>
        if (lane1 > 0) lane1--;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <handle_auto_events+0x6c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	dd04      	ble.n	80005ac <handle_auto_events+0x48>
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <handle_auto_events+0x6c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <handle_auto_events+0x6c>)
 80005aa:	6013      	str	r3, [r2, #0]
        if (lane2 > 0) lane2--;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <handle_auto_events+0x70>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dd04      	ble.n	80005be <handle_auto_events+0x5a>
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <handle_auto_events+0x70>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <handle_auto_events+0x70>)
 80005bc:	6013      	str	r3, [r2, #0]
        reset(ONE_SECOND);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fd98 	bl	80010f4 <reset>
    }
}
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000080 	.word	0x20000080
 80005cc:	20000140 	.word	0x20000140
 80005d0:	20000074 	.word	0x20000074
 80005d4:	20000078 	.word	0x20000078

080005d8 <fsm_auto_run>:

/*------------------------------------------------
 * FSM AUTO MODE — chỉ xử lý logic theo state
 *------------------------------------------------*/
void fsm_auto_run() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    handle_auto_events(); // xử lý sự kiện trước
 80005dc:	f7ff ffc2 	bl	8000564 <handle_auto_events>

    switch (state_auto) {
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <fsm_auto_run+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d827      	bhi.n	8000638 <fsm_auto_run+0x60>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <fsm_auto_run+0x18>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800060f 	.word	0x0800060f
 80005f8:	0800061d 	.word	0x0800061d
 80005fc:	0800062b 	.word	0x0800062b
    case RED_GREEN:
        if (actions[TIME_COUNT_PROGRAM].timer_flag) {
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <fsm_auto_run+0x8c>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d01a      	beq.n	800063e <fsm_auto_run+0x66>
            init_RED_AMBER();
 8000608:	f000 f892 	bl	8000730 <init_RED_AMBER>
        }
        break;
 800060c:	e017      	b.n	800063e <fsm_auto_run+0x66>

    case RED_AMBER:
        if (actions[TIME_COUNT_PROGRAM].timer_flag) {
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <fsm_auto_run+0x8c>)
 8000610:	6a1b      	ldr	r3, [r3, #32]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d015      	beq.n	8000642 <fsm_auto_run+0x6a>
            init_GREEN_RED();
 8000616:	f000 f8bb 	bl	8000790 <init_GREEN_RED>
        }
        break;
 800061a:	e012      	b.n	8000642 <fsm_auto_run+0x6a>

    case GREEN_RED:
        if (actions[TIME_COUNT_PROGRAM].timer_flag) {
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <fsm_auto_run+0x8c>)
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d010      	beq.n	8000646 <fsm_auto_run+0x6e>
            init_AMBER_RED();
 8000624:	f000 f8ea 	bl	80007fc <init_AMBER_RED>
        }
        break;
 8000628:	e00d      	b.n	8000646 <fsm_auto_run+0x6e>

    case AMBER_RED:
        if (actions[TIME_COUNT_PROGRAM].timer_flag) {
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <fsm_auto_run+0x8c>)
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <fsm_auto_run+0x72>
            init_RED_GREEN();
 8000632:	f000 f847 	bl	80006c4 <init_RED_GREEN>
        }
        break;
 8000636:	e008      	b.n	800064a <fsm_auto_run+0x72>

    default:
        init_RED_GREEN();
 8000638:	f000 f844 	bl	80006c4 <init_RED_GREEN>
        break;
 800063c:	e006      	b.n	800064c <fsm_auto_run+0x74>
        break;
 800063e:	bf00      	nop
 8000640:	e004      	b.n	800064c <fsm_auto_run+0x74>
        break;
 8000642:	bf00      	nop
 8000644:	e002      	b.n	800064c <fsm_auto_run+0x74>
        break;
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <fsm_auto_run+0x74>
        break;
 800064a:	bf00      	nop
    }

    update7SEG(lane1, lane2);
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <fsm_auto_run+0x90>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <fsm_auto_run+0x94>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdae 	bl	80001b8 <update7SEG>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000070 	.word	0x20000070
 8000664:	20000140 	.word	0x20000140
 8000668:	20000074 	.word	0x20000074
 800066c:	20000078 	.word	0x20000078

08000670 <come_back_auto>:

/*------------------------------------------------
 * Hàm khôi phục lại trạng thái AUTO sau khi
 * thoát khỏi MANUAL MODE
 *------------------------------------------------*/
void come_back_auto() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    setupTime(ONE_SECOND, SECOND);
 8000674:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fd03 	bl	8001084 <setupTime>

    switch (state_auto) {
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <come_back_auto+0x50>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d816      	bhi.n	80006b4 <come_back_auto+0x44>
 8000686:	a201      	add	r2, pc, #4	; (adr r2, 800068c <come_back_auto+0x1c>)
 8000688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068c:	0800069d 	.word	0x0800069d
 8000690:	080006a3 	.word	0x080006a3
 8000694:	080006a9 	.word	0x080006a9
 8000698:	080006af 	.word	0x080006af
    case RED_GREEN:  init_RED_GREEN();  break;
 800069c:	f000 f812 	bl	80006c4 <init_RED_GREEN>
 80006a0:	e00b      	b.n	80006ba <come_back_auto+0x4a>
    case RED_AMBER:  init_RED_AMBER();  break;
 80006a2:	f000 f845 	bl	8000730 <init_RED_AMBER>
 80006a6:	e008      	b.n	80006ba <come_back_auto+0x4a>
    case GREEN_RED:  init_GREEN_RED();  break;
 80006a8:	f000 f872 	bl	8000790 <init_GREEN_RED>
 80006ac:	e005      	b.n	80006ba <come_back_auto+0x4a>
    case AMBER_RED:  init_AMBER_RED();  break;
 80006ae:	f000 f8a5 	bl	80007fc <init_AMBER_RED>
 80006b2:	e002      	b.n	80006ba <come_back_auto+0x4a>
    default:         init_RED_GREEN();  break;
 80006b4:	f000 f806 	bl	80006c4 <init_RED_GREEN>
 80006b8:	bf00      	nop
    }
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000070 	.word	0x20000070

080006c4 <init_RED_GREEN>:

/*------------------------------------------------
 * Các hàm khởi tạo trạng thái đèn
 *------------------------------------------------*/
void init_RED_GREEN() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_RED);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fa67 	bl	8000b9c <turn_on_LED>
	turn_on_LED(LED_B_GREEN);
 80006ce:	2006      	movs	r0, #6
 80006d0:	f000 fa64 	bl	8000b9c <turn_on_LED>

	turn_off_LED(LED_A_AMBER);
 80006d4:	2002      	movs	r0, #2
 80006d6:	f000 fa77 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_A_GREEN);
 80006da:	2003      	movs	r0, #3
 80006dc:	f000 fa74 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_RED);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f000 fa71 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_AMBER);
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 fa6e 	bl	8000bc8 <turn_off_LED>

	state_auto = RED_GREEN;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <init_RED_GREEN+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, TrafficTimer[GREEN] * SECOND);
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <init_RED_GREEN+0x60>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fcbf 	bl	8001084 <setupTime>
	lane1 = TrafficTimer[RED];
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <init_RED_GREEN+0x60>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <init_RED_GREEN+0x64>)
 800070c:	6013      	str	r3, [r2, #0]
	lane2 = TrafficTimer[GREEN];
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <init_RED_GREEN+0x60>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <init_RED_GREEN+0x68>)
 8000714:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 fcec 	bl	80010f4 <reset>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000070 	.word	0x20000070
 8000724:	20000028 	.word	0x20000028
 8000728:	20000074 	.word	0x20000074
 800072c:	20000078 	.word	0x20000078

08000730 <init_RED_AMBER>:

void init_RED_AMBER() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_RED);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fa31 	bl	8000b9c <turn_on_LED>
	turn_on_LED(LED_B_AMBER);
 800073a:	2005      	movs	r0, #5
 800073c:	f000 fa2e 	bl	8000b9c <turn_on_LED>

	turn_off_LED(LED_A_AMBER);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 fa41 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_A_GREEN);
 8000746:	2003      	movs	r0, #3
 8000748:	f000 fa3e 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_RED);
 800074c:	2004      	movs	r0, #4
 800074e:	f000 fa3b 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_GREEN);
 8000752:	2006      	movs	r0, #6
 8000754:	f000 fa38 	bl	8000bc8 <turn_off_LED>

	state_auto = RED_AMBER;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <init_RED_AMBER+0x54>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, TrafficTimer[AMBER] * SECOND);
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <init_RED_AMBER+0x58>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000766:	fb02 f303 	mul.w	r3, r2, r3
 800076a:	4619      	mov	r1, r3
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fc89 	bl	8001084 <setupTime>
	lane2 = TrafficTimer[AMBER];
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <init_RED_AMBER+0x58>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <init_RED_AMBER+0x5c>)
 8000778:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fcba 	bl	80010f4 <reset>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000070 	.word	0x20000070
 8000788:	20000028 	.word	0x20000028
 800078c:	20000078 	.word	0x20000078

08000790 <init_GREEN_RED>:

void init_GREEN_RED() {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_GREEN);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 fa01 	bl	8000b9c <turn_on_LED>
	turn_on_LED(LED_B_RED);
 800079a:	2004      	movs	r0, #4
 800079c:	f000 f9fe 	bl	8000b9c <turn_on_LED>

	turn_off_LED(LED_A_AMBER);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 fa11 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_A_RED);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fa0e 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_GREEN);
 80007ac:	2006      	movs	r0, #6
 80007ae:	f000 fa0b 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_AMBER);
 80007b2:	2005      	movs	r0, #5
 80007b4:	f000 fa08 	bl	8000bc8 <turn_off_LED>

	state_auto = GREEN_RED;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <init_GREEN_RED+0x5c>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, TrafficTimer[GREEN] * SECOND);
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <init_GREEN_RED+0x60>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c6:	fb02 f303 	mul.w	r3, r2, r3
 80007ca:	4619      	mov	r1, r3
 80007cc:	2002      	movs	r0, #2
 80007ce:	f000 fc59 	bl	8001084 <setupTime>
	lane1 = TrafficTimer[GREEN];
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <init_GREEN_RED+0x60>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <init_GREEN_RED+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]
	lane2 = TrafficTimer[RED];
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <init_GREEN_RED+0x60>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <init_GREEN_RED+0x68>)
 80007e0:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 fc86 	bl	80010f4 <reset>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000070 	.word	0x20000070
 80007f0:	20000028 	.word	0x20000028
 80007f4:	20000074 	.word	0x20000074
 80007f8:	20000078 	.word	0x20000078

080007fc <init_AMBER_RED>:

void init_AMBER_RED() {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_AMBER);
 8000800:	2002      	movs	r0, #2
 8000802:	f000 f9cb 	bl	8000b9c <turn_on_LED>
	turn_on_LED(LED_B_RED);
 8000806:	2004      	movs	r0, #4
 8000808:	f000 f9c8 	bl	8000b9c <turn_on_LED>

	turn_off_LED(LED_A_RED);
 800080c:	2001      	movs	r0, #1
 800080e:	f000 f9db 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_A_GREEN);
 8000812:	2003      	movs	r0, #3
 8000814:	f000 f9d8 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_GREEN);
 8000818:	2006      	movs	r0, #6
 800081a:	f000 f9d5 	bl	8000bc8 <turn_off_LED>
	turn_off_LED(LED_B_AMBER);
 800081e:	2005      	movs	r0, #5
 8000820:	f000 f9d2 	bl	8000bc8 <turn_off_LED>

	state_auto = AMBER_RED;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <init_AMBER_RED+0x54>)
 8000826:	2203      	movs	r2, #3
 8000828:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, TrafficTimer[AMBER] * SECOND);
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <init_AMBER_RED+0x58>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	4619      	mov	r1, r3
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fc23 	bl	8001084 <setupTime>
	lane1 = TrafficTimer[AMBER];
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <init_AMBER_RED+0x58>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <init_AMBER_RED+0x5c>)
 8000844:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 fc54 	bl	80010f4 <reset>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000070 	.word	0x20000070
 8000854:	20000028 	.word	0x20000028
 8000858:	20000074 	.word	0x20000074

0800085c <init_fsm_manual>:
/*=====================[ GLOBAL VARIABLES ]=====================*/
int state_manual = 0;   // 3 state RED - 0, GREEN - 1, AMBER - 2
int temp_time;

/*=====================[ INIT FUNCTIONS ]=====================*/
void init_fsm_manual() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	state_manual = RED;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <init_fsm_manual+0x34>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
	temp_time = TrafficTimer[RED];
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <init_fsm_manual+0x38>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <init_fsm_manual+0x3c>)
 800086c:	6013      	str	r3, [r2, #0]
	init_blinkLED(state_manual);
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <init_fsm_manual+0x34>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f9d2 	bl	8000c1c <init_blinkLED>
	setupTime(TIME_COUNT_PROGRAM, 20000);
 8000878:	f644 6120 	movw	r1, #20000	; 0x4e20
 800087c:	2002      	movs	r0, #2
 800087e:	f000 fc01 	bl	8001084 <setupTime>
	setupTime(ONE_SECOND, SECOND / 2);
 8000882:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fbfc 	bl	8001084 <setupTime>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000007c 	.word	0x2000007c
 8000894:	20000028 	.word	0x20000028
 8000898:	200000f4 	.word	0x200000f4

0800089c <init_manual_control>:

void init_manual_control() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	setupTime(ONE_SECOND, SECOND);
 80008a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a4:	2001      	movs	r0, #1
 80008a6:	f000 fbed 	bl	8001084 <setupTime>

	// Điều chỉnh lại trạng thái hiện tại của auto
	if (state_auto == RED_AMBER)
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <init_manual_control+0x48>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d102      	bne.n	80008b8 <init_manual_control+0x1c>
		state_auto = GREEN_RED;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <init_manual_control+0x48>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
	if (state_auto == AMBER_RED)
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <init_manual_control+0x48>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d102      	bne.n	80008c6 <init_manual_control+0x2a>
		state_auto = RED_GREEN;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <init_manual_control+0x48>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]

	switch (state_auto) {
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <init_manual_control+0x48>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <init_manual_control+0x3c>
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d105      	bne.n	80008de <init_manual_control+0x42>
	case GREEN_RED: init_GREEN_RED(); break;
 80008d2:	f7ff ff5d 	bl	8000790 <init_GREEN_RED>
 80008d6:	e003      	b.n	80008e0 <init_manual_control+0x44>
	case RED_GREEN: init_RED_GREEN(); break;
 80008d8:	f7ff fef4 	bl	80006c4 <init_RED_GREEN>
 80008dc:	e000      	b.n	80008e0 <init_manual_control+0x44>
	default: break;
 80008de:	bf00      	nop
	}
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000070 	.word	0x20000070

080008e8 <handleControlMode>:

/*=====================[ INPUT HANDLERS ]=====================*/
// Nếu Control Mode được nhấn, ghi đè và chuyển sang Control
void handleControlMode() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	if (!isControlPress())
 80008ec:	f7ff fd24 	bl	8000338 <isControlPress>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <handleControlMode+0x1a>
		return;

	admin_mode = MANUAL_CONTROL_MODE;
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <handleControlMode+0x20>)
 80008f8:	2203      	movs	r2, #3
 80008fa:	601a      	str	r2, [r3, #0]
	init_manual_control();
 80008fc:	f7ff ffce 	bl	800089c <init_manual_control>
 8000900:	e000      	b.n	8000904 <handleControlMode+0x1c>
		return;
 8000902:	bf00      	nop
}
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000080 	.word	0x20000080

0800090c <handleModeButton>:

// Nếu Mode button được nhấn, chuyển trạng thái
void handleModeButton() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if (!isModePress()) return; // Không nhấn thì thoát luôn
 8000910:	f7ff fcfa 	bl	8000308 <isModePress>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d020      	beq.n	800095c <handleModeButton+0x50>
	setupTime(ONE_SECOND, SECOND / 2);
 800091a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fbb0 	bl	8001084 <setupTime>
	state_manual++;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <handleModeButton+0x54>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <handleModeButton+0x54>)
 800092c:	6013      	str	r3, [r2, #0]
	if (state_manual > AMBER) {
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <handleModeButton+0x54>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	dd05      	ble.n	8000942 <handleModeButton+0x36>
		admin_mode = ACTIVE_MODE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <handleModeButton+0x58>)
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
		come_back_auto();
 800093c:	f7ff fe98 	bl	8000670 <come_back_auto>
		return;
 8000940:	e00d      	b.n	800095e <handleModeButton+0x52>
	}
	temp_time = TrafficTimer[state_manual];
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <handleModeButton+0x54>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <handleModeButton+0x5c>)
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <handleModeButton+0x60>)
 800094e:	6013      	str	r3, [r2, #0]
	init_blinkLED(state_manual);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <handleModeButton+0x54>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f961 	bl	8000c1c <init_blinkLED>
 800095a:	e000      	b.n	800095e <handleModeButton+0x52>
	if (!isModePress()) return; // Không nhấn thì thoát luôn
 800095c:	bf00      	nop
}
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000007c 	.word	0x2000007c
 8000964:	20000080 	.word	0x20000080
 8000968:	20000028 	.word	0x20000028
 800096c:	200000f4 	.word	0x200000f4

08000970 <handleTimeButton>:

// Nếu Time button được nhấn, tăng thời gian
void handleTimeButton() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	if (!isTimePress()) return;
 8000974:	f7ff fcd0 	bl	8000318 <isTimePress>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00c      	beq.n	8000998 <handleTimeButton+0x28>

	if (++temp_time > 99) temp_time = 1; // Giới hạn mức tối đa
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <handleTimeButton+0x2c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <handleTimeButton+0x2c>)
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <handleTimeButton+0x2c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b63      	cmp	r3, #99	; 0x63
 800098e:	dd04      	ble.n	800099a <handleTimeButton+0x2a>
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <handleTimeButton+0x2c>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e000      	b.n	800099a <handleTimeButton+0x2a>
	if (!isTimePress()) return;
 8000998:	bf00      	nop
}
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000f4 	.word	0x200000f4

080009a0 <handleSetButton>:

void handleSetButton() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	if (!isSetPress())
 80009a4:	f7ff fcc0 	bl	8000328 <isSetPress>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d034      	beq.n	8000a18 <handleSetButton+0x78>
		return; // Không nhấn thì thoát luôn

	switch (state_manual) {
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <handleSetButton+0x7c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d01e      	beq.n	80009f4 <handleSetButton+0x54>
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	dc28      	bgt.n	8000a0c <handleSetButton+0x6c>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <handleSetButton+0x24>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d00c      	beq.n	80009dc <handleSetButton+0x3c>
 80009c2:	e023      	b.n	8000a0c <handleSetButton+0x6c>
	case RED:
		TrafficTimer[RED] = temp_time;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <handleSetButton+0x80>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <handleSetButton+0x84>)
 80009ca:	6013      	str	r3, [r2, #0]
		TrafficTimer[GREEN] = TrafficTimer[RED] - TrafficTimer[AMBER];
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <handleSetButton+0x84>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <handleSetButton+0x84>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <handleSetButton+0x84>)
 80009d8:	6053      	str	r3, [r2, #4]
		break;
 80009da:	e017      	b.n	8000a0c <handleSetButton+0x6c>
	case GREEN:
		TrafficTimer[GREEN] = temp_time;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <handleSetButton+0x80>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <handleSetButton+0x84>)
 80009e2:	6053      	str	r3, [r2, #4]
		TrafficTimer[RED] = TrafficTimer[GREEN] + TrafficTimer[AMBER];
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <handleSetButton+0x84>)
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <handleSetButton+0x84>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <handleSetButton+0x84>)
 80009f0:	6013      	str	r3, [r2, #0]
		break;
 80009f2:	e00b      	b.n	8000a0c <handleSetButton+0x6c>
	case AMBER:
		TrafficTimer[AMBER] = temp_time;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <handleSetButton+0x80>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <handleSetButton+0x84>)
 80009fa:	6093      	str	r3, [r2, #8]
		TrafficTimer[RED] = TrafficTimer[GREEN] + TrafficTimer[AMBER];
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <handleSetButton+0x84>)
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <handleSetButton+0x84>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <handleSetButton+0x84>)
 8000a08:	6013      	str	r3, [r2, #0]
		break;
 8000a0a:	bf00      	nop
	}
	admin_mode = ACTIVE_MODE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <handleSetButton+0x88>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
	come_back_auto();
 8000a12:	f7ff fe2d 	bl	8000670 <come_back_auto>
 8000a16:	e000      	b.n	8000a1a <handleSetButton+0x7a>
		return; // Không nhấn thì thoát luôn
 8000a18:	bf00      	nop
}
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000007c 	.word	0x2000007c
 8000a20:	200000f4 	.word	0x200000f4
 8000a24:	20000028 	.word	0x20000028
 8000a28:	20000080 	.word	0x20000080

08000a2c <handleBlinkLed>:
/*=====================[ OUTPUT FUNCTIONS ]=====================*/
void handleBlinkLed() {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	if (actions[ONE_SECOND].timer_flag == 1) {
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <handleBlinkLed+0x20>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d107      	bne.n	8000a48 <handleBlinkLed+0x1c>
		reset(ONE_SECOND);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f000 fb5b 	bl	80010f4 <reset>
		blinkLED(state_manual);
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <handleBlinkLed+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f939 	bl	8000cba <blinkLED>
	}
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000140 	.word	0x20000140
 8000a50:	2000007c 	.word	0x2000007c

08000a54 <fsm_manual_run>:
/*=====================[ FSM MAIN LOOP ]=====================*/
void fsm_manual_run() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch (state_manual) {
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <fsm_manual_run+0x78>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d024      	beq.n	8000aaa <fsm_manual_run+0x56>
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	dc31      	bgt.n	8000ac8 <fsm_manual_run+0x74>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <fsm_manual_run+0x1a>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d00f      	beq.n	8000a8c <fsm_manual_run+0x38>
		handleTimeButton();
		handleSetButton();
		handleBlinkLed();
		break;
	}
}
 8000a6c:	e02c      	b.n	8000ac8 <fsm_manual_run+0x74>
		update7SEG(temp_time, 2);
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <fsm_manual_run+0x7c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2102      	movs	r1, #2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fb9f 	bl	80001b8 <update7SEG>
		handleModeButton();
 8000a7a:	f7ff ff47 	bl	800090c <handleModeButton>
		handleTimeButton();
 8000a7e:	f7ff ff77 	bl	8000970 <handleTimeButton>
		handleSetButton();
 8000a82:	f7ff ff8d 	bl	80009a0 <handleSetButton>
		handleBlinkLed();
 8000a86:	f7ff ffd1 	bl	8000a2c <handleBlinkLed>
		break;
 8000a8a:	e01d      	b.n	8000ac8 <fsm_manual_run+0x74>
		update7SEG(temp_time, 3);
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <fsm_manual_run+0x7c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2103      	movs	r1, #3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fb90 	bl	80001b8 <update7SEG>
		handleModeButton();
 8000a98:	f7ff ff38 	bl	800090c <handleModeButton>
		handleTimeButton();
 8000a9c:	f7ff ff68 	bl	8000970 <handleTimeButton>
		handleSetButton();
 8000aa0:	f7ff ff7e 	bl	80009a0 <handleSetButton>
		handleBlinkLed();
 8000aa4:	f7ff ffc2 	bl	8000a2c <handleBlinkLed>
		break;
 8000aa8:	e00e      	b.n	8000ac8 <fsm_manual_run+0x74>
		update7SEG(temp_time, 4);
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <fsm_manual_run+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb81 	bl	80001b8 <update7SEG>
		handleModeButton();
 8000ab6:	f7ff ff29 	bl	800090c <handleModeButton>
		handleTimeButton();
 8000aba:	f7ff ff59 	bl	8000970 <handleTimeButton>
		handleSetButton();
 8000abe:	f7ff ff6f 	bl	80009a0 <handleSetButton>
		handleBlinkLed();
 8000ac2:	f7ff ffb3 	bl	8000a2c <handleBlinkLed>
		break;
 8000ac6:	bf00      	nop
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000007c 	.word	0x2000007c
 8000ad0:	200000f4 	.word	0x200000f4

08000ad4 <manual_control_run>:
/*=====================[ MANUAL CONTROL MODE ]=====================*/

void manual_control_run() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	// Giữ Mode và Set sẽ trở về chế độ auto
	if (isControlPress()) {
 8000ad8:	f7ff fc2e 	bl	8000338 <isControlPress>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d005      	beq.n	8000aee <manual_control_run+0x1a>
		admin_mode = ACTIVE_MODE;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <manual_control_run+0x58>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
		come_back_auto();
 8000ae8:	f7ff fdc2 	bl	8000670 <come_back_auto>
		return;
 8000aec:	e01c      	b.n	8000b28 <manual_control_run+0x54>
	}
	// Nhấn Set sẽ chuyển đèn
	if (isSetPress()) {
 8000aee:	f7ff fc1b 	bl	8000328 <isSetPress>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d013      	beq.n	8000b20 <manual_control_run+0x4c>
		switch (state_auto) {
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <manual_control_run+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d007      	beq.n	8000b10 <manual_control_run+0x3c>
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d10b      	bne.n	8000b1c <manual_control_run+0x48>
		case GREEN_RED:
			state_auto = RED_GREEN;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <manual_control_run+0x5c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
			init_RED_GREEN();
 8000b0a:	f7ff fddb 	bl	80006c4 <init_RED_GREEN>
			break;
 8000b0e:	e006      	b.n	8000b1e <manual_control_run+0x4a>
		case RED_GREEN:
			state_auto = GREEN_RED;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <manual_control_run+0x5c>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	601a      	str	r2, [r3, #0]
			init_GREEN_RED();
 8000b16:	f7ff fe3b 	bl	8000790 <init_GREEN_RED>
			break;
 8000b1a:	e000      	b.n	8000b1e <manual_control_run+0x4a>
		default:
			break;
 8000b1c:	bf00      	nop
		}
		return;
 8000b1e:	e003      	b.n	8000b28 <manual_control_run+0x54>
	}
	update7SEG(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fb48 	bl	80001b8 <update7SEG>
}
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000080 	.word	0x20000080
 8000b30:	20000070 	.word	0x20000070

08000b34 <run>:

int admin_mode = INIT;

int TrafficTimer[3] = {10, 7, 3}; // RED - GREEN - AMBER

void run(){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	switch (admin_mode){
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <run+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d828      	bhi.n	8000b92 <run+0x5e>
 8000b40:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <run+0x14>)
 8000b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b46:	bf00      	nop
 8000b48:	08000b59 	.word	0x08000b59
 8000b4c:	08000b81 	.word	0x08000b81
 8000b50:	08000b87 	.word	0x08000b87
 8000b54:	08000b8d 	.word	0x08000b8d
	case INIT:
		admin_mode = ACTIVE_MODE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <run+0x64>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
		setupTime(SYSTEM_LED, 500);
 8000b5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 fa8e 	bl	8001084 <setupTime>
		setupTime(TIME_SEGMENT, LED_SEGMENT_CYCLE / 2);
 8000b68:	2164      	movs	r1, #100	; 0x64
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 fa8a 	bl	8001084 <setupTime>
		setupTime(ONE_SECOND, SECOND);
 8000b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 fa85 	bl	8001084 <setupTime>
		init_RED_GREEN();
 8000b7a:	f7ff fda3 	bl	80006c4 <init_RED_GREEN>
		break;
 8000b7e:	e009      	b.n	8000b94 <run+0x60>
	case ACTIVE_MODE:
		fsm_auto_run();
 8000b80:	f7ff fd2a 	bl	80005d8 <fsm_auto_run>
		break;
 8000b84:	e006      	b.n	8000b94 <run+0x60>
	case MANUAL_MODE:
		fsm_manual_run();
 8000b86:	f7ff ff65 	bl	8000a54 <fsm_manual_run>
		break;
 8000b8a:	e003      	b.n	8000b94 <run+0x60>
	case MANUAL_CONTROL_MODE:
		manual_control_run();
 8000b8c:	f7ff ffa2 	bl	8000ad4 <manual_control_run>
		break;
 8000b90:	e000      	b.n	8000b94 <run+0x60>
	default:
		break;
 8000b92:	bf00      	nop
	}
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000080 	.word	0x20000080

08000b9c <turn_on_LED>:
int state_led = 0;

uint16_t array_led_pins[] = { LED_RED_Pin, LED_A_RED_Pin, LED_A_AMBER_Pin,
		LED_A_GREEN_Pin, LED_B_RED_Pin, LED_B_AMBER_Pin, LED_B_GREEN_Pin };

void turn_on_LED(int pos) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, array_led_pins[pos], GPIO_PIN_SET);
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <turn_on_LED+0x24>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bac:	2201      	movs	r2, #1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <turn_on_LED+0x28>)
 8000bb2:	f000 fe34 	bl	800181e <HAL_GPIO_WritePin>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000034 	.word	0x20000034
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <turn_off_LED>:

void turn_off_LED(int pos) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, array_led_pins[pos], GPIO_PIN_RESET);
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <turn_off_LED+0x24>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <turn_off_LED+0x28>)
 8000bde:	f000 fe1e 	bl	800181e <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000034 	.word	0x20000034
 8000bf0:	40010800 	.word	0x40010800

08000bf4 <toggle_LED>:

void toggle_LED(int pos) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, array_led_pins[pos]);
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <toggle_LED+0x20>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <toggle_LED+0x24>)
 8000c08:	f000 fe21 	bl	800184e <HAL_GPIO_TogglePin>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000034 	.word	0x20000034
 8000c18:	40010800 	.word	0x40010800

08000c1c <init_blinkLED>:

void init_blinkLED(int color) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	switch (color) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d01c      	beq.n	8000c64 <init_blinkLED+0x48>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	dc3f      	bgt.n	8000cb0 <init_blinkLED+0x94>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <init_blinkLED+0x22>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d026      	beq.n	8000c8a <init_blinkLED+0x6e>

		turn_off_LED(LED_A_AMBER);
		turn_off_LED(LED_B_AMBER);
		break;
	default:
		break;
 8000c3c:	e038      	b.n	8000cb0 <init_blinkLED+0x94>
		turn_on_LED(LED_A_RED);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff ffac 	bl	8000b9c <turn_on_LED>
		turn_on_LED(LED_B_RED);
 8000c44:	2004      	movs	r0, #4
 8000c46:	f7ff ffa9 	bl	8000b9c <turn_on_LED>
		turn_off_LED(LED_A_GREEN);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f7ff ffbc 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_B_GREEN);
 8000c50:	2006      	movs	r0, #6
 8000c52:	f7ff ffb9 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_A_AMBER);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff ffb6 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_B_AMBER);
 8000c5c:	2005      	movs	r0, #5
 8000c5e:	f7ff ffb3 	bl	8000bc8 <turn_off_LED>
		break;
 8000c62:	e026      	b.n	8000cb2 <init_blinkLED+0x96>
		turn_on_LED(LED_A_AMBER);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff ff99 	bl	8000b9c <turn_on_LED>
		turn_on_LED(LED_B_AMBER);
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	f7ff ff96 	bl	8000b9c <turn_on_LED>
		turn_off_LED(LED_A_RED);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff ffa9 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_B_RED);
 8000c76:	2004      	movs	r0, #4
 8000c78:	f7ff ffa6 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_A_GREEN);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff ffa3 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_B_GREEN);
 8000c82:	2006      	movs	r0, #6
 8000c84:	f7ff ffa0 	bl	8000bc8 <turn_off_LED>
		break;
 8000c88:	e013      	b.n	8000cb2 <init_blinkLED+0x96>
		turn_on_LED(LED_A_GREEN);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f7ff ff86 	bl	8000b9c <turn_on_LED>
		turn_on_LED(LED_B_GREEN);
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff ff83 	bl	8000b9c <turn_on_LED>
		turn_off_LED(LED_A_RED);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ff96 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_B_RED);
 8000c9c:	2004      	movs	r0, #4
 8000c9e:	f7ff ff93 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_A_AMBER);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff ff90 	bl	8000bc8 <turn_off_LED>
		turn_off_LED(LED_B_AMBER);
 8000ca8:	2005      	movs	r0, #5
 8000caa:	f7ff ff8d 	bl	8000bc8 <turn_off_LED>
		break;
 8000cae:	e000      	b.n	8000cb2 <init_blinkLED+0x96>
		break;
 8000cb0:	bf00      	nop
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <blinkLED>:

void blinkLED(int color) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	switch (color) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d010      	beq.n	8000cea <blinkLED+0x30>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	dc1b      	bgt.n	8000d06 <blinkLED+0x4c>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <blinkLED+0x22>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d00e      	beq.n	8000cf8 <blinkLED+0x3e>
	case GREEN:
		toggle_LED(LED_A_GREEN);
		toggle_LED(LED_B_GREEN);
		break;
	default:
		break;
 8000cda:	e014      	b.n	8000d06 <blinkLED+0x4c>
		toggle_LED(LED_A_RED);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ff89 	bl	8000bf4 <toggle_LED>
		toggle_LED(LED_B_RED);
 8000ce2:	2004      	movs	r0, #4
 8000ce4:	f7ff ff86 	bl	8000bf4 <toggle_LED>
		break;
 8000ce8:	e00e      	b.n	8000d08 <blinkLED+0x4e>
		toggle_LED(LED_A_AMBER);
 8000cea:	2002      	movs	r0, #2
 8000cec:	f7ff ff82 	bl	8000bf4 <toggle_LED>
		toggle_LED(LED_B_AMBER);
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f7ff ff7f 	bl	8000bf4 <toggle_LED>
		break;
 8000cf6:	e007      	b.n	8000d08 <blinkLED+0x4e>
		toggle_LED(LED_A_GREEN);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f7ff ff7b 	bl	8000bf4 <toggle_LED>
		toggle_LED(LED_B_GREEN);
 8000cfe:	2006      	movs	r0, #6
 8000d00:	f7ff ff78 	bl	8000bf4 <toggle_LED>
		break;
 8000d04:	e000      	b.n	8000d08 <blinkLED+0x4e>
		break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fa82 	bl	800121c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f80a 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f890 	bl	8000e40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d20:	f000 f842 	bl	8000da8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d24:	4801      	ldr	r0, [pc, #4]	; (8000d2c <main+0x1c>)
 8000d26:	f001 f9d7 	bl	80020d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d2a:	e7fe      	b.n	8000d2a <main+0x1a>
 8000d2c:	200000f8 	.word	0x200000f8

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fd7a 	bl	8002838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fd8a 	bl	8001880 <HAL_RCC_OscConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d72:	f000 f8f3 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	230f      	movs	r3, #15
 8000d78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fff6 	bl	8001d80 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f8df 	bl	8000f5c <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3740      	adds	r7, #64	; 0x40
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000ddc:	2263      	movs	r2, #99	; 0x63
 8000dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dee:	f001 f923 	bl	8002038 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000df8:	f000 f8b0 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e0a:	f001 faa1 	bl	8002350 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 f8a2 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e26:	f001 fc79 	bl	800271c <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f894 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000f8 	.word	0x200000f8

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a34      	ldr	r2, [pc, #208]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A_RED_Pin|LED_A_AMBER_Pin|LED_A_GREEN_Pin|EN_A_Pin
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8000ea2:	4823      	ldr	r0, [pc, #140]	; (8000f30 <MX_GPIO_Init+0xf0>)
 8000ea4:	f000 fcbb 	bl	800181e <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_B_RED_Pin|LED_B_AMBER_Pin|LED_B_GREEN_Pin
                          |EN_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Seg1_a_Pin|Seg1_b_Pin|Seg1_c_Pin|Seg2_d_Pin
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000eae:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_GPIO_Init+0xf4>)
 8000eb0:	f000 fcb5 	bl	800181e <HAL_GPIO_WritePin>
                          |Seg2_e_Pin|Seg2_f_Pin|Seg2_g_Pin|Seg1_d_Pin
                          |Seg1_e_Pin|Seg1_f_Pin|Seg1_g_Pin|Seg2_a_Pin
                          |Seg2_b_Pin|Seg2_c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000eca:	f000 fb17 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_RED_Pin LED_A_AMBER_Pin LED_A_GREEN_Pin EN_A_Pin
                           LED_RED_Pin LED_B_RED_Pin LED_B_AMBER_Pin LED_B_GREEN_Pin
                           EN_B_Pin */
  GPIO_InitStruct.Pin = LED_A_RED_Pin|LED_A_AMBER_Pin|LED_A_GREEN_Pin|EN_A_Pin
 8000ece:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000ed2:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_B_RED_Pin|LED_B_AMBER_Pin|LED_B_GREEN_Pin
                          |EN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <MX_GPIO_Init+0xf0>)
 8000ee8:	f000 fb08 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Seg1_a_Pin Seg1_b_Pin Seg1_c_Pin Seg2_d_Pin
                           Seg2_e_Pin Seg2_f_Pin Seg2_g_Pin Seg1_d_Pin
                           Seg1_e_Pin Seg1_f_Pin Seg1_g_Pin Seg2_a_Pin
                           Seg2_b_Pin Seg2_c_Pin */
  GPIO_InitStruct.Pin = Seg1_a_Pin|Seg1_b_Pin|Seg1_c_Pin|Seg2_d_Pin
 8000eec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ef0:	613b      	str	r3, [r7, #16]
                          |Seg2_e_Pin|Seg2_f_Pin|Seg2_g_Pin|Seg1_d_Pin
                          |Seg1_e_Pin|Seg1_f_Pin|Seg1_g_Pin|Seg2_a_Pin
                          |Seg2_b_Pin|Seg2_c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MX_GPIO_Init+0xf4>)
 8000f06:	f000 faf9 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin TIME_Pin SET_Pin CONTROL_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|TIME_Pin|SET_Pin|CONTROL_Pin;
 8000f0a:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_GPIO_Init+0xf0>)
 8000f20:	f000 faec 	bl	80014fc <HAL_GPIO_Init>

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	40011000 	.word	0x40011000

08000f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000f44:	f7ff fa00 	bl	8000348 <getKeyInput>
	timerRun();
 8000f48:	f000 f8fa 	bl	8001140 <timerRun>
	run();
 8000f4c:	f7ff fdf2 	bl	8000b34 <run>
	handleControlMode();
 8000f50:	f7ff fcca 	bl	80008e8 <handleControlMode>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d113      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f000 fa47 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001000:	201c      	movs	r0, #28
 8001002:	f000 fa60 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f925 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM2_IRQHandler+0x10>)
 800106a:	f001 f881 	bl	8002170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000f8 	.word	0x200000f8

08001078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <setupTime>:

#include <timer.h>

detail_time actions[NUMBER_OF_ACTIONS];

void setupTime(int index, int duration) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	actions[index].time = duration / TIMER_CYCLE;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	4a16      	ldr	r2, [pc, #88]	; (80010ec <setupTime+0x68>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	1152      	asrs	r2, r2, #5
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	1ad1      	subs	r1, r2, r3
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <setupTime+0x6c>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4403      	add	r3, r0
 80010aa:	6019      	str	r1, [r3, #0]
	actions[index].timer_counter = duration / TIMER_CYCLE;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <setupTime+0x68>)
 80010b0:	fb82 1203 	smull	r1, r2, r2, r3
 80010b4:	1152      	asrs	r2, r2, #5
 80010b6:	17db      	asrs	r3, r3, #31
 80010b8:	1ad1      	subs	r1, r2, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <setupTime+0x6c>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4403      	add	r3, r0
 80010c8:	3304      	adds	r3, #4
 80010ca:	6019      	str	r1, [r3, #0]
	actions[index].timer_flag = 0;
 80010cc:	4908      	ldr	r1, [pc, #32]	; (80010f0 <setupTime+0x6c>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3308      	adds	r3, #8
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	51eb851f 	.word	0x51eb851f
 80010f0:	20000140 	.word	0x20000140

080010f4 <reset>:

void reset(int index) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	actions[index].timer_counter = actions[index].time;
 80010fc:	490f      	ldr	r1, [pc, #60]	; (800113c <reset+0x48>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	6819      	ldr	r1, [r3, #0]
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <reset+0x48>)
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4403      	add	r3, r0
 800111a:	3304      	adds	r3, #4
 800111c:	6019      	str	r1, [r3, #0]
	actions[index].timer_flag = 0;
 800111e:	4907      	ldr	r1, [pc, #28]	; (800113c <reset+0x48>)
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	3308      	adds	r3, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	20000140 	.word	0x20000140

08001140 <timerRun>:

void timerRun() {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_ACTIONS; i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e035      	b.n	80011b8 <timerRun+0x78>
		if (actions[i].timer_counter > 0) {
 800114c:	491f      	ldr	r1, [pc, #124]	; (80011cc <timerRun+0x8c>)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3304      	adds	r3, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dd27      	ble.n	80011b2 <timerRun+0x72>
			actions[i].timer_counter--;
 8001162:	491a      	ldr	r1, [pc, #104]	; (80011cc <timerRun+0x8c>)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1e59      	subs	r1, r3, #1
 8001176:	4815      	ldr	r0, [pc, #84]	; (80011cc <timerRun+0x8c>)
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4403      	add	r3, r0
 8001184:	3304      	adds	r3, #4
 8001186:	6019      	str	r1, [r3, #0]
			if (actions[i].timer_counter <= 0) {
 8001188:	4910      	ldr	r1, [pc, #64]	; (80011cc <timerRun+0x8c>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dc09      	bgt.n	80011b2 <timerRun+0x72>
				actions[i].timer_flag = 1;
 800119e:	490b      	ldr	r1, [pc, #44]	; (80011cc <timerRun+0x8c>)
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	3308      	adds	r3, #8
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_ACTIONS; i++) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3301      	adds	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	ddc6      	ble.n	800114c <timerRun+0xc>
			}
		}
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000140 	.word	0x20000140

080011d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d0:	f7ff ff52 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d6:	490c      	ldr	r1, [pc, #48]	; (8001208 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <LoopFillZerobss+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ec:	4c09      	ldr	r4, [pc, #36]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 faf9 	bl	80027f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff fd87 	bl	8000d10 <main>
  bx lr
 8001202:	4770      	bx	lr
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800120c:	080028d4 	.word	0x080028d4
  ldr r2, =_sbss
 8001210:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001214:	20000180 	.word	0x20000180

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x28>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f923 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fe96 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f93b 	bl	80014e2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f903 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000044 	.word	0x20000044
 80012a0:	2000004c 	.word	0x2000004c
 80012a4:	20000048 	.word	0x20000048

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	2000004c 	.word	0x2000004c
 80012c8:	2000017c 	.word	0x2000017c

080012cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	2000017c 	.word	0x2000017c

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <__NVIC_EnableIRQ+0x34>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff90 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff42 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff35 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e148      	b.n	80017a2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001510:	2201      	movs	r2, #1
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8137 	bne.w	800179c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4aa3      	ldr	r2, [pc, #652]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d05e      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001538:	4aa1      	ldr	r2, [pc, #644]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d875      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800153e:	4aa1      	ldr	r2, [pc, #644]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d058      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001544:	4a9f      	ldr	r2, [pc, #636]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d86f      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800154a:	4a9f      	ldr	r2, [pc, #636]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d052      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001550:	4a9d      	ldr	r2, [pc, #628]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d869      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001556:	4a9d      	ldr	r2, [pc, #628]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04c      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 800155c:	4a9b      	ldr	r2, [pc, #620]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d863      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001562:	4a9b      	ldr	r2, [pc, #620]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d046      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001568:	4a99      	ldr	r2, [pc, #612]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d85d      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800156e:	2b12      	cmp	r3, #18
 8001570:	d82a      	bhi.n	80015c8 <HAL_GPIO_Init+0xcc>
 8001572:	2b12      	cmp	r3, #18
 8001574:	d859      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_GPIO_Init+0x80>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015f7 	.word	0x080015f7
 8001580:	080015d1 	.word	0x080015d1
 8001584:	080015e3 	.word	0x080015e3
 8001588:	08001625 	.word	0x08001625
 800158c:	0800162b 	.word	0x0800162b
 8001590:	0800162b 	.word	0x0800162b
 8001594:	0800162b 	.word	0x0800162b
 8001598:	0800162b 	.word	0x0800162b
 800159c:	0800162b 	.word	0x0800162b
 80015a0:	0800162b 	.word	0x0800162b
 80015a4:	0800162b 	.word	0x0800162b
 80015a8:	0800162b 	.word	0x0800162b
 80015ac:	0800162b 	.word	0x0800162b
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	0800162b 	.word	0x0800162b
 80015b8:	0800162b 	.word	0x0800162b
 80015bc:	0800162b 	.word	0x0800162b
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015ed 	.word	0x080015ed
 80015c8:	4a82      	ldr	r2, [pc, #520]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ce:	e02c      	b.n	800162a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e029      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e024      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	3308      	adds	r3, #8
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e01f      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	330c      	adds	r3, #12
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e01a      	b.n	800162c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fe:	2304      	movs	r3, #4
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e013      	b.n	800162c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	611a      	str	r2, [r3, #16]
          break;
 8001616:	e009      	b.n	800162c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	615a      	str	r2, [r3, #20]
          break;
 8001622:	e003      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x130>
          break;
 800162a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d801      	bhi.n	8001636 <HAL_GPIO_Init+0x13a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e001      	b.n	800163a <HAL_GPIO_Init+0x13e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d802      	bhi.n	8001648 <HAL_GPIO_Init+0x14c>
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x152>
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3b08      	subs	r3, #8
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	210f      	movs	r1, #15
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8090 	beq.w	800179c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167c:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x2e0>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <HAL_GPIO_Init+0x2e4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00d      	beq.n	80016dc <HAL_GPIO_Init+0x1e0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d007      	beq.n	80016d8 <HAL_GPIO_Init+0x1dc>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_GPIO_Init+0x1d8>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e004      	b.n	80016de <HAL_GPIO_Init+0x1e2>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e002      	b.n	80016de <HAL_GPIO_Init+0x1e2>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_GPIO_Init+0x1e2>
 80016dc:	2300      	movs	r3, #0
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4093      	lsls	r3, r2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ee:	493b      	ldr	r1, [pc, #236]	; (80017dc <HAL_GPIO_Init+0x2e0>)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4937      	ldr	r1, [pc, #220]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4933      	ldr	r1, [pc, #204]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001720:	4013      	ands	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	492d      	ldr	r1, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	4929      	ldr	r1, [pc, #164]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001748:	4013      	ands	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4923      	ldr	r1, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	491f      	ldr	r1, [pc, #124]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4919      	ldr	r1, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	4915      	ldr	r1, [pc, #84]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 8001798:	4013      	ands	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	3301      	adds	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f aeaf 	bne.w	8001510 <HAL_GPIO_Init+0x14>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	372c      	adds	r7, #44	; 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	10320000 	.word	0x10320000
 80017c4:	10310000 	.word	0x10310000
 80017c8:	10220000 	.word	0x10220000
 80017cc:	10210000 	.word	0x10210000
 80017d0:	10120000 	.word	0x10120000
 80017d4:	10110000 	.word	0x10110000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
 800182a:	4613      	mov	r3, r2
 800182c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182e:	787b      	ldrb	r3, [r7, #1]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800183a:	e003      	b.n	8001844 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43d9      	mvns	r1, r3
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	400b      	ands	r3, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e26c      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8087 	beq.w	80019ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d00c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ac:	4b8f      	ldr	r3, [pc, #572]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d112      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
 80018b8:	4b8c      	ldr	r3, [pc, #560]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d10b      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4b89      	ldr	r3, [pc, #548]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06c      	beq.n	80019ac <HAL_RCC_OscConfig+0x12c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d168      	bne.n	80019ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e246      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x76>
 80018e8:	4b80      	ldr	r3, [pc, #512]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a7f      	ldr	r2, [pc, #508]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e02e      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x98>
 80018fe:	4b7b      	ldr	r3, [pc, #492]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7a      	ldr	r2, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0xbc>
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a71      	ldr	r2, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 800193c:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6a      	ldr	r2, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a67      	ldr	r2, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fcb6 	bl	80012cc <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fcb2 	bl	80012cc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1fa      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xe4>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fca2 	bl	80012cc <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fc9e 	bl	80012cc <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1e6      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x10c>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d11c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x18c>
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d116      	bne.n	8001a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_RCC_OscConfig+0x176>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1ba      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4939      	ldr	r1, [pc, #228]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	e03a      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x270>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fc57 	bl	80012cc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fc53 	bl	80012cc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e19b      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x270>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc36 	bl	80012cc <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc32 	bl	80012cc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e17a      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d03a      	beq.n	8001b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d019      	beq.n	8001aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fc16 	bl	80012cc <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fc12 	bl	80012cc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e15a      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 fa9a 	bl	8001ffc <RCC_Delay>
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fbfc 	bl	80012cc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad6:	e00f      	b.n	8001af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fbf8 	bl	80012cc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d908      	bls.n	8001af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e140      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	42420000 	.word	0x42420000
 8001af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b9e      	ldr	r3, [pc, #632]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e9      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a6 	beq.w	8001c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b97      	ldr	r3, [pc, #604]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10d      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b94      	ldr	r3, [pc, #592]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a93      	ldr	r2, [pc, #588]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b8e      	ldr	r3, [pc, #568]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d118      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b56:	f7ff fbb9 	bl	80012cc <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5e:	f7ff fbb5 	bl	80012cc <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0fd      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x312>
 8001b84:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	e02d      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x334>
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	e01c      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x356>
 8001bbc:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a6c      	ldr	r2, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a69      	ldr	r2, [pc, #420]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a63      	ldr	r2, [pc, #396]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d015      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb69 	bl	80012cc <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fb65 	bl	80012cc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0ab      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ee      	beq.n	8001bfe <HAL_RCC_OscConfig+0x37e>
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff fb53 	bl	80012cc <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff fb4f 	bl	80012cc <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e095      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a47      	ldr	r2, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8081 	beq.w	8001d6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d061      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d146      	bne.n	8001d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_OscConfig+0x4fc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fb23 	bl	80012cc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff fb1f 	bl	80012cc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e067      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d108      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	492d      	ldr	r1, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a19      	ldr	r1, [r3, #32]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x4fc>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff faf3 	bl	80012cc <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff faef 	bl	80012cc <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e037      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x46a>
 8001d08:	e02f      	b.n	8001d6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_RCC_OscConfig+0x4fc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fadc 	bl	80012cc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff fad8 	bl	80012cc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e020      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x498>
 8001d36:	e018      	b.n	8001d6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e013      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42420060 	.word	0x42420060

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d0      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b67      	ldr	r3, [pc, #412]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4965      	ldr	r1, [pc, #404]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d040      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e073      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06b      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4936      	ldr	r1, [pc, #216]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7ff fa2c 	bl	80012cc <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff fa28 	bl	80012cc <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e053      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d210      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4922      	ldr	r1, [pc, #136]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1cc>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f98a 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	080028a8 	.word	0x080028a8
 8001f4c:	20000044 	.word	0x20000044
 8001f50:	20000048 	.word	0x20000048

08001f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x36>
 8001f82:	e027      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001f86:	613b      	str	r3, [r7, #16]
      break;
 8001f88:	e027      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0c5b      	lsrs	r3, r3, #17
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb6:	fb02 f203 	mul.w	r2, r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e004      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	613b      	str	r3, [r7, #16]
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	693b      	ldr	r3, [r7, #16]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	080028b8 	.word	0x080028b8
 8001ff4:	080028c8 	.word	0x080028c8
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <RCC_Delay+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <RCC_Delay+0x38>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002018:	bf00      	nop
  }
  while (Delay --);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <RCC_Delay+0x1c>
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000044 	.word	0x20000044
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e041      	b.n	80020ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe ffb4 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 fa56 	bl	8002528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d001      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e035      	b.n	800215c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <HAL_TIM_Base_Start_IT+0x90>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_TIM_Base_Start_IT+0x4e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211a:	d004      	beq.n	8002126 <HAL_TIM_Base_Start_IT+0x4e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_TIM_Base_Start_IT+0x94>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d111      	bne.n	800214a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d010      	beq.n	800215a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002148:	e007      	b.n	800215a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40000400 	.word	0x40000400

08002170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d020      	beq.n	80021d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0202 	mvn.w	r2, #2
 80021a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f998 	bl	80024f0 <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f98b 	bl	80024de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f99a 	bl	8002502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d020      	beq.n	8002220 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01b      	beq.n	8002220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0204 	mvn.w	r2, #4
 80021f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f972 	bl	80024f0 <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f965 	bl	80024de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f974 	bl	8002502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d020      	beq.n	800226c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0208 	mvn.w	r2, #8
 800223c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2204      	movs	r2, #4
 8002242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f94c 	bl	80024f0 <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f93f 	bl	80024de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f94e 	bl	8002502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d020      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0210 	mvn.w	r2, #16
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2208      	movs	r2, #8
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f926 	bl	80024f0 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f919 	bl	80024de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f928 	bl	8002502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0201 	mvn.w	r2, #1
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fe30 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa6f 	bl	80027de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8f8 	bl	8002514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0220 	mvn.w	r2, #32
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fa42 	bl	80027cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_TIM_ConfigClockSource+0x1c>
 8002368:	2302      	movs	r3, #2
 800236a:	e0b4      	b.n	80024d6 <HAL_TIM_ConfigClockSource+0x186>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800238a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a4:	d03e      	beq.n	8002424 <HAL_TIM_ConfigClockSource+0xd4>
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	f200 8087 	bhi.w	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b2:	f000 8086 	beq.w	80024c2 <HAL_TIM_ConfigClockSource+0x172>
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	d87f      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d01a      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0xa6>
 80023c0:	2b70      	cmp	r3, #112	; 0x70
 80023c2:	d87b      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b60      	cmp	r3, #96	; 0x60
 80023c6:	d050      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x11a>
 80023c8:	2b60      	cmp	r3, #96	; 0x60
 80023ca:	d877      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d03c      	beq.n	800244a <HAL_TIM_ConfigClockSource+0xfa>
 80023d0:	2b50      	cmp	r3, #80	; 0x50
 80023d2:	d873      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d058      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x13a>
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d86f      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b30      	cmp	r3, #48	; 0x30
 80023de:	d064      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x15a>
 80023e0:	2b30      	cmp	r3, #48	; 0x30
 80023e2:	d86b      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d060      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x15a>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d867      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05c      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d05a      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	e062      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f000 f96a 	bl	80026de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	609a      	str	r2, [r3, #8]
      break;
 8002422:	e04f      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f000 f953 	bl	80026de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002446:	609a      	str	r2, [r3, #8]
      break;
 8002448:	e03c      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8ca 	bl	80025f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2150      	movs	r1, #80	; 0x50
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f921 	bl	80026aa <TIM_ITRx_SetConfig>
      break;
 8002468:	e02c      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	461a      	mov	r2, r3
 8002478:	f000 f8e8 	bl	800264c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2160      	movs	r1, #96	; 0x60
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f911 	bl	80026aa <TIM_ITRx_SetConfig>
      break;
 8002488:	e01c      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	461a      	mov	r2, r3
 8002498:	f000 f8aa 	bl	80025f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f901 	bl	80026aa <TIM_ITRx_SetConfig>
      break;
 80024a8:	e00c      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f000 f8f8 	bl	80026aa <TIM_ITRx_SetConfig>
      break;
 80024ba:	e003      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e000      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
	...

08002528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <TIM_Base_SetConfig+0xc0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <TIM_Base_SetConfig+0x28>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002546:	d003      	beq.n	8002550 <TIM_Base_SetConfig+0x28>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a28      	ldr	r2, [pc, #160]	; (80025ec <TIM_Base_SetConfig+0xc4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d108      	bne.n	8002562 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <TIM_Base_SetConfig+0xc0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <TIM_Base_SetConfig+0x52>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d003      	beq.n	800257a <TIM_Base_SetConfig+0x52>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <TIM_Base_SetConfig+0xc4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d108      	bne.n	800258c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <TIM_Base_SetConfig+0xc0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f023 0201 	bic.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]
  }
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400

080025f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0201 	bic.w	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f023 030a 	bic.w	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	621a      	str	r2, [r3, #32]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f023 0210 	bic.w	r2, r3, #16
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	031b      	lsls	r3, r3, #12
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002688:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	621a      	str	r2, [r3, #32]
}
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f043 0307 	orr.w	r3, r3, #7
 80026cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b087      	sub	sp, #28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	021a      	lsls	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	431a      	orrs	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4313      	orrs	r3, r2
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	609a      	str	r2, [r3, #8]
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002730:	2302      	movs	r3, #2
 8002732:	e041      	b.n	80027b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d004      	beq.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10c      	bne.n	80027a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	4313      	orrs	r3, r2
 800279c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40000400 	.word	0x40000400

080027cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <__libc_init_array>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	2600      	movs	r6, #0
 80027f4:	4d0c      	ldr	r5, [pc, #48]	; (8002828 <__libc_init_array+0x38>)
 80027f6:	4c0d      	ldr	r4, [pc, #52]	; (800282c <__libc_init_array+0x3c>)
 80027f8:	1b64      	subs	r4, r4, r5
 80027fa:	10a4      	asrs	r4, r4, #2
 80027fc:	42a6      	cmp	r6, r4
 80027fe:	d109      	bne.n	8002814 <__libc_init_array+0x24>
 8002800:	f000 f822 	bl	8002848 <_init>
 8002804:	2600      	movs	r6, #0
 8002806:	4d0a      	ldr	r5, [pc, #40]	; (8002830 <__libc_init_array+0x40>)
 8002808:	4c0a      	ldr	r4, [pc, #40]	; (8002834 <__libc_init_array+0x44>)
 800280a:	1b64      	subs	r4, r4, r5
 800280c:	10a4      	asrs	r4, r4, #2
 800280e:	42a6      	cmp	r6, r4
 8002810:	d105      	bne.n	800281e <__libc_init_array+0x2e>
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	f855 3b04 	ldr.w	r3, [r5], #4
 8002818:	4798      	blx	r3
 800281a:	3601      	adds	r6, #1
 800281c:	e7ee      	b.n	80027fc <__libc_init_array+0xc>
 800281e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002822:	4798      	blx	r3
 8002824:	3601      	adds	r6, #1
 8002826:	e7f2      	b.n	800280e <__libc_init_array+0x1e>
 8002828:	080028cc 	.word	0x080028cc
 800282c:	080028cc 	.word	0x080028cc
 8002830:	080028cc 	.word	0x080028cc
 8002834:	080028d0 	.word	0x080028d0

08002838 <memset>:
 8002838:	4603      	mov	r3, r0
 800283a:	4402      	add	r2, r0
 800283c:	4293      	cmp	r3, r2
 800283e:	d100      	bne.n	8002842 <memset+0xa>
 8002840:	4770      	bx	lr
 8002842:	f803 1b01 	strb.w	r1, [r3], #1
 8002846:	e7f9      	b.n	800283c <memset+0x4>

08002848 <_init>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	bf00      	nop
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr

08002854 <_fini>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr
