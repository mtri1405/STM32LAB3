
STM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b4  080030b4  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080030b4  080030b4  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b4  080030b4  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080030bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000050  0800310c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  0800310c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d183  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224d  00000000  00000000  0002d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002f450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002fee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db4  00000000  00000000  00030868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c875  00000000  00000000  0004861c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008609a  00000000  00000000  00054e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000daf2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000daf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	08003030 	.word	0x08003030

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	08003030 	.word	0x08003030

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <display7SEG>:
Seg1_e_Pin, Seg1_f_Pin, Seg1_g_Pin };

uint16_t segPins_B[7] = { Seg2_a_Pin, Seg2_b_Pin, Seg2_c_Pin, Seg2_d_Pin,
Seg2_e_Pin, Seg2_f_Pin, Seg2_g_Pin };

void display7SEG(int num, uint16_t *segPins) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]

	if (num < 0 || num > 9)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db02      	blt.n	8000892 <display7SEG+0x16>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b09      	cmp	r3, #9
 8000890:	dd01      	ble.n	8000896 <display7SEG+0x1a>
		num = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 7; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e019      	b.n	80008d0 <display7SEG+0x54>
		HAL_GPIO_WritePin(GPIOB, segPins[i],
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	8819      	ldrh	r1, [r3, #0]
				seg_pattern[num][i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <display7SEG+0x64>)
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	1a9b      	subs	r3, r3, r2
 80008b0:	18c2      	adds	r2, r0, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, segPins[i],
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <display7SEG+0x68>)
 80008c6:	f001 fb1e 	bl	8001f06 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	dde2      	ble.n	800089c <display7SEG+0x20>
	}
}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08003048 	.word	0x08003048
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <update7SEG>:

void update7SEG(int numsA, int numsB) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	if (actions[TIME_SEGMENT].timer_flag == 1) {
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <update7SEG+0xe0>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d161      	bne.n	80009be <update7SEG+0xd6>
		static int state = 0;

		int tensA = numsA / 10;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a33      	ldr	r2, [pc, #204]	; (80009cc <update7SEG+0xe4>)
 80008fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000902:	1092      	asrs	r2, r2, #2
 8000904:	17db      	asrs	r3, r3, #31
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	617b      	str	r3, [r7, #20]
		int onesA = numsA % 10;
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <update7SEG+0xe4>)
 800090e:	fb83 1302 	smull	r1, r3, r3, r2
 8000912:	1099      	asrs	r1, r3, #2
 8000914:	17d3      	asrs	r3, r2, #31
 8000916:	1ac9      	subs	r1, r1, r3
 8000918:	460b      	mov	r3, r1
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	613b      	str	r3, [r7, #16]

		int tensB = numsB / 10;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	4a29      	ldr	r2, [pc, #164]	; (80009cc <update7SEG+0xe4>)
 8000928:	fb82 1203 	smull	r1, r2, r2, r3
 800092c:	1092      	asrs	r2, r2, #2
 800092e:	17db      	asrs	r3, r3, #31
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	60fb      	str	r3, [r7, #12]
		int onesB = numsB % 10;
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <update7SEG+0xe4>)
 8000938:	fb83 1302 	smull	r1, r3, r3, r2
 800093c:	1099      	asrs	r1, r3, #2
 800093e:	17d3      	asrs	r3, r2, #31
 8000940:	1ac9      	subs	r1, r1, r3
 8000942:	460b      	mov	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	60bb      	str	r3, [r7, #8]

		if (state == 1) {
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <update7SEG+0xe8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d113      	bne.n	800097e <update7SEG+0x96>
			// Display Ten digits
			HAL_GPIO_WritePin(GPIOA, EN_A_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <update7SEG+0xec>)
 800095c:	f001 fad3 	bl	8001f06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN_B_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <update7SEG+0xec>)
 8000968:	f001 facd 	bl	8001f06 <HAL_GPIO_WritePin>
			display7SEG(tensA, segPins_A);
 800096c:	491a      	ldr	r1, [pc, #104]	; (80009d8 <update7SEG+0xf0>)
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff ff84 	bl	800087c <display7SEG>
			display7SEG(tensB, segPins_B);
 8000974:	4919      	ldr	r1, [pc, #100]	; (80009dc <update7SEG+0xf4>)
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f7ff ff80 	bl	800087c <display7SEG>
 800097c:	e016      	b.n	80009ac <update7SEG+0xc4>
		} else if (state == 0) {
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <update7SEG+0xe8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d112      	bne.n	80009ac <update7SEG+0xc4>
			// Display One digits
			HAL_GPIO_WritePin(GPIOA, EN_A_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2110      	movs	r1, #16
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <update7SEG+0xec>)
 800098c:	f001 fabb 	bl	8001f06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN_B_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <update7SEG+0xec>)
 8000998:	f001 fab5 	bl	8001f06 <HAL_GPIO_WritePin>
			display7SEG(onesA, segPins_A);
 800099c:	490e      	ldr	r1, [pc, #56]	; (80009d8 <update7SEG+0xf0>)
 800099e:	6938      	ldr	r0, [r7, #16]
 80009a0:	f7ff ff6c 	bl	800087c <display7SEG>
			display7SEG(onesB, segPins_B);
 80009a4:	490d      	ldr	r1, [pc, #52]	; (80009dc <update7SEG+0xf4>)
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f7ff ff68 	bl	800087c <display7SEG>
		}
		state = 1 - state; // Change state
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <update7SEG+0xe8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1c3 0301 	rsb	r3, r3, #1
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <update7SEG+0xe8>)
 80009b6:	6013      	str	r3, [r2, #0]
		reset(TIME_SEGMENT);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 feeb 	bl	8001794 <reset>
	}
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000120 	.word	0x20000120
 80009cc:	66666667 	.word	0x66666667
 80009d0:	2000006c 	.word	0x2000006c
 80009d4:	40010800 	.word	0x40010800
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000010 	.word	0x20000010

080009e0 <isButtonPress>:

// Declare number of button
keyInput button[NO_BUTTON];

//
int isButtonPress(int idx) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if (idx > 2 || idx < 0) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	dc02      	bgt.n	80009f4 <isButtonPress+0x14>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	da02      	bge.n	80009fa <isButtonPress+0x1a>
		return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	e017      	b.n	8000a2a <isButtonPress+0x4a>
	} else {
		if (button[idx].flag == 1) {
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <isButtonPress+0x54>)
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	440b      	add	r3, r1
 8000a08:	3314      	adds	r3, #20
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10b      	bne.n	8000a28 <isButtonPress+0x48>
			button[idx].flag = 0;
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <isButtonPress+0x54>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3314      	adds	r3, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
			return 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <isButtonPress+0x4a>
		}
	}
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000084 	.word	0x20000084

08000a38 <isModePress>:

int isModePress() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	return isButtonPress(MODE);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ffcf 	bl	80009e0 <isButtonPress>
 8000a42:	4603      	mov	r3, r0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <isTimePress>:
int isTimePress() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	return isButtonPress(TIME);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ffc7 	bl	80009e0 <isButtonPress>
 8000a52:	4603      	mov	r3, r0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <isSetPress>:
int isSetPress() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	return isButtonPress(SET);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f7ff ffbf 	bl	80009e0 <isButtonPress>
 8000a62:	4603      	mov	r3, r0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <getKeyInput>:

void getKeyInput() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_BUTTON; i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e0e3      	b.n	8000c3c <getKeyInput+0x1d4>
		// shifting the button registry history
		button[i].KeyReg2 = button[i].KeyReg1;
 8000a74:	4976      	ldr	r1, [pc, #472]	; (8000c50 <getKeyInput+0x1e8>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3304      	adds	r3, #4
 8000a84:	6819      	ldr	r1, [r3, #0]
 8000a86:	4872      	ldr	r0, [pc, #456]	; (8000c50 <getKeyInput+0x1e8>)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4403      	add	r3, r0
 8000a94:	3308      	adds	r3, #8
 8000a96:	6019      	str	r1, [r3, #0]
		button[i].KeyReg1 = button[i].KeyReg0;
 8000a98:	496d      	ldr	r1, [pc, #436]	; (8000c50 <getKeyInput+0x1e8>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	4869      	ldr	r0, [pc, #420]	; (8000c50 <getKeyInput+0x1e8>)
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4613      	mov	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4413      	add	r3, r2
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4403      	add	r3, r0
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	6019      	str	r1, [r3, #0]
		// Read current button state from hardware pin
		button[i].KeyReg0 = HAL_GPIO_ReadPin(GPIOA, pin_of_buttons[i]);
 8000aba:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <getKeyInput+0x1ec>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4864      	ldr	r0, [pc, #400]	; (8000c58 <getKeyInput+0x1f0>)
 8000ac6:	f001 fa07 	bl	8001ed8 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4618      	mov	r0, r3
 8000ace:	4960      	ldr	r1, [pc, #384]	; (8000c50 <getKeyInput+0x1e8>)
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	6018      	str	r0, [r3, #0]

		// Checking button state is stable for 3 read
		if ((button[i].KeyReg0 == button[i].KeyReg1)
 8000ade:	495c      	ldr	r1, [pc, #368]	; (8000c50 <getKeyInput+0x1e8>)
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	440b      	add	r3, r1
 8000aec:	6819      	ldr	r1, [r3, #0]
 8000aee:	4858      	ldr	r0, [pc, #352]	; (8000c50 <getKeyInput+0x1e8>)
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4403      	add	r3, r0
 8000afc:	3304      	adds	r3, #4
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f040 8098 	bne.w	8000c36 <getKeyInput+0x1ce>
				&& (button[i].KeyReg1 == button[i].KeyReg2)) {
 8000b06:	4952      	ldr	r1, [pc, #328]	; (8000c50 <getKeyInput+0x1e8>)
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	440b      	add	r3, r1
 8000b14:	3304      	adds	r3, #4
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	484d      	ldr	r0, [pc, #308]	; (8000c50 <getKeyInput+0x1e8>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4403      	add	r3, r0
 8000b26:	3308      	adds	r3, #8
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	f040 8083 	bne.w	8000c36 <getKeyInput+0x1ce>
			//	Detect any change compare to the previous history state
			if (button[i].KeyReg2 != button[i].KeyReg3) {
 8000b30:	4947      	ldr	r1, [pc, #284]	; (8000c50 <getKeyInput+0x1e8>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	440b      	add	r3, r1
 8000b3e:	3308      	adds	r3, #8
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	4843      	ldr	r0, [pc, #268]	; (8000c50 <getKeyInput+0x1e8>)
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	4403      	add	r3, r0
 8000b50:	330c      	adds	r3, #12
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d031      	beq.n	8000bbc <getKeyInput+0x154>
				button[i].KeyReg3 = button[i].KeyReg2;
 8000b58:	493d      	ldr	r1, [pc, #244]	; (8000c50 <getKeyInput+0x1e8>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	440b      	add	r3, r1
 8000b66:	3308      	adds	r3, #8
 8000b68:	6819      	ldr	r1, [r3, #0]
 8000b6a:	4839      	ldr	r0, [pc, #228]	; (8000c50 <getKeyInput+0x1e8>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4403      	add	r3, r0
 8000b78:	330c      	adds	r3, #12
 8000b7a:	6019      	str	r1, [r3, #0]

				//	If button is press, set flag to 1 and start counting for long press timer
				if (button[i].KeyReg3 == PRESS_STATE) {
 8000b7c:	4934      	ldr	r1, [pc, #208]	; (8000c50 <getKeyInput+0x1e8>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d151      	bne.n	8000c36 <getKeyInput+0x1ce>
					button[i].timeLongPress = timeOutForKeyPress;
 8000b92:	492f      	ldr	r1, [pc, #188]	; (8000c50 <getKeyInput+0x1e8>)
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	2232      	movs	r2, #50	; 0x32
 8000ba4:	601a      	str	r2, [r3, #0]
					button[i].flag = 1;
 8000ba6:	492a      	ldr	r1, [pc, #168]	; (8000c50 <getKeyInput+0x1e8>)
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3314      	adds	r3, #20
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e03c      	b.n	8000c36 <getKeyInput+0x1ce>
				}
			} else {
				// If button is holding press, count down the long press timer
				button[i].timeLongPress--;
 8000bbc:	4924      	ldr	r1, [pc, #144]	; (8000c50 <getKeyInput+0x1e8>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	3310      	adds	r3, #16
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1e59      	subs	r1, r3, #1
 8000bd0:	481f      	ldr	r0, [pc, #124]	; (8000c50 <getKeyInput+0x1e8>)
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4413      	add	r3, r2
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4403      	add	r3, r0
 8000bde:	3310      	adds	r3, #16
 8000be0:	6019      	str	r1, [r3, #0]
				if (button[i].timeLongPress <= 0) {
 8000be2:	491b      	ldr	r1, [pc, #108]	; (8000c50 <getKeyInput+0x1e8>)
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3310      	adds	r3, #16
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	dc1e      	bgt.n	8000c36 <getKeyInput+0x1ce>
					button[i].timeLongPress = timeOutForKeyPress;
 8000bf8:	4915      	ldr	r1, [pc, #84]	; (8000c50 <getKeyInput+0x1e8>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3310      	adds	r3, #16
 8000c08:	2232      	movs	r2, #50	; 0x32
 8000c0a:	601a      	str	r2, [r3, #0]
					//	Create event for long press timer
					if (button[i].KeyReg3 == PRESS_STATE) {
 8000c0c:	4910      	ldr	r1, [pc, #64]	; (8000c50 <getKeyInput+0x1e8>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	440b      	add	r3, r1
 8000c1a:	330c      	adds	r3, #12
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <getKeyInput+0x1ce>
						button[i].flag = 1;
 8000c22:	490b      	ldr	r1, [pc, #44]	; (8000c50 <getKeyInput+0x1e8>)
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3314      	adds	r3, #20
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NO_BUTTON; i++) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	f77f af18 	ble.w	8000a74 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000084 	.word	0x20000084
 8000c54:	20000020 	.word	0x20000020
 8000c58:	40010800 	.word	0x40010800

08000c5c <fsm_auto_run>:

int state_auto = 0;
int lane1 = 0;
int lane2 = 0;

void fsm_auto_run() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	if (isModePress()) {
 8000c60:	f7ff feea 	bl	8000a38 <isModePress>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <fsm_auto_run+0x1a>
		admin_mode = MANUAL_MODE;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <fsm_auto_run+0xa8>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	601a      	str	r2, [r3, #0]
		init_fsm_manual();
 8000c70:	f000 f948 	bl	8000f04 <init_fsm_manual>
		return;
 8000c74:	e045      	b.n	8000d02 <fsm_auto_run+0xa6>
	}

	if (actions[SYSTEM_LED].timer_flag == 1) {
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <fsm_auto_run+0xac>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d105      	bne.n	8000c8a <fsm_auto_run+0x2e>
		toggle_LED(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fb06 	bl	8001290 <toggle_LED>
		reset(SYSTEM_LED);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fd85 	bl	8001794 <reset>
	}

	if (actions[ONE_SECOND].timer_flag == 1) {
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <fsm_auto_run+0xac>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10c      	bne.n	8000cac <fsm_auto_run+0x50>
		lane1--;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <fsm_auto_run+0xb0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <fsm_auto_run+0xb0>)
 8000c9a:	6013      	str	r3, [r2, #0]
		lane2--;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <fsm_auto_run+0xb4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <fsm_auto_run+0xb4>)
 8000ca4:	6013      	str	r3, [r2, #0]
		reset(ONE_SECOND);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fd74 	bl	8001794 <reset>
	}

	if (actions[TIME_COUNT_PROGRAM].timer_flag == 1) {
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <fsm_auto_run+0xac>)
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d11b      	bne.n	8000cec <fsm_auto_run+0x90>
		switch (state_auto) {
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <fsm_auto_run+0xb8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d819      	bhi.n	8000cf0 <fsm_auto_run+0x94>
 8000cbc:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <fsm_auto_run+0x68>)
 8000cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000cd5 	.word	0x08000cd5
 8000cc8:	08000cdb 	.word	0x08000cdb
 8000ccc:	08000ce1 	.word	0x08000ce1
 8000cd0:	08000ce7 	.word	0x08000ce7
		case RED_GREEN:
			init_RED_AMBER();
 8000cd4:	f000 f87e 	bl	8000dd4 <init_RED_AMBER>
			break;
 8000cd8:	e00b      	b.n	8000cf2 <fsm_auto_run+0x96>
		case RED_AMBER:
			init_GREEN_RED();
 8000cda:	f000 f8ab 	bl	8000e34 <init_GREEN_RED>
			break;
 8000cde:	e008      	b.n	8000cf2 <fsm_auto_run+0x96>
		case GREEN_RED:
			init_AMBER_RED();
 8000ce0:	f000 f8e0 	bl	8000ea4 <init_AMBER_RED>
			break;
 8000ce4:	e005      	b.n	8000cf2 <fsm_auto_run+0x96>
		case AMBER_RED:
			init_RED_GREEN();
 8000ce6:	f000 f83d 	bl	8000d64 <init_RED_GREEN>
			break;
 8000cea:	e002      	b.n	8000cf2 <fsm_auto_run+0x96>
		default:
			break;
		}
	}
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <fsm_auto_run+0x96>
			break;
 8000cf0:	bf00      	nop

	update7SEG(lane1, lane2);
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <fsm_auto_run+0xb0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <fsm_auto_run+0xb4>)
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fdf3 	bl	80008e8 <update7SEG>

}
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000080 	.word	0x20000080
 8000d08:	20000120 	.word	0x20000120
 8000d0c:	20000074 	.word	0x20000074
 8000d10:	20000078 	.word	0x20000078
 8000d14:	20000070 	.word	0x20000070

08000d18 <come_back_auto>:
void come_back_auto(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	setupTime(ONE_SECOND, SECOND);
 8000d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fcff 	bl	8001724 <setupTime>
    switch (state_auto)
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <come_back_auto+0x48>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d815      	bhi.n	8000d5a <come_back_auto+0x42>
 8000d2e:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <come_back_auto+0x1c>)
 8000d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d34:	08000d45 	.word	0x08000d45
 8000d38:	08000d4b 	.word	0x08000d4b
 8000d3c:	08000d51 	.word	0x08000d51
 8000d40:	08000d57 	.word	0x08000d57
    {
    case RED_GREEN:
        init_RED_GREEN();
 8000d44:	f000 f80e 	bl	8000d64 <init_RED_GREEN>
        break;
 8000d48:	e008      	b.n	8000d5c <come_back_auto+0x44>
    case RED_AMBER:
        init_RED_AMBER();
 8000d4a:	f000 f843 	bl	8000dd4 <init_RED_AMBER>
        break;
 8000d4e:	e005      	b.n	8000d5c <come_back_auto+0x44>
    case GREEN_RED:
        init_GREEN_RED();
 8000d50:	f000 f870 	bl	8000e34 <init_GREEN_RED>
        break;
 8000d54:	e002      	b.n	8000d5c <come_back_auto+0x44>
    case AMBER_RED:
        init_AMBER_RED();
 8000d56:	f000 f8a5 	bl	8000ea4 <init_AMBER_RED>
    default:
        break;
 8000d5a:	bf00      	nop
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000070 	.word	0x20000070

08000d64 <init_RED_GREEN>:
void init_RED_GREEN() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_RED);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 fa65 	bl	8001238 <turn_on_LED>
	turn_on_LED(LED_B_GREEN);
 8000d6e:	2006      	movs	r0, #6
 8000d70:	f000 fa62 	bl	8001238 <turn_on_LED>

	turn_off_LED(LED_A_AMBER);
 8000d74:	2002      	movs	r0, #2
 8000d76:	f000 fa75 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_A_GREEN);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 fa72 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_RED);
 8000d80:	2004      	movs	r0, #4
 8000d82:	f000 fa6f 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_AMBER);
 8000d86:	2005      	movs	r0, #5
 8000d88:	f000 fa6c 	bl	8001264 <turn_off_LED>

	state_auto = RED_GREEN;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <init_RED_GREEN+0x5c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, Time_green * SECOND);
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <init_RED_GREEN+0x60>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2002      	movs	r0, #2
 8000da2:	f000 fcbf 	bl	8001724 <setupTime>
	lane1 = Time_red;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <init_RED_GREEN+0x64>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <init_RED_GREEN+0x68>)
 8000dac:	6013      	str	r3, [r2, #0]
	lane2 = Time_green;
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <init_RED_GREEN+0x60>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <init_RED_GREEN+0x6c>)
 8000db4:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fcec 	bl	8001794 <reset>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000070 	.word	0x20000070
 8000dc4:	20000030 	.word	0x20000030
 8000dc8:	20000028 	.word	0x20000028
 8000dcc:	20000074 	.word	0x20000074
 8000dd0:	20000078 	.word	0x20000078

08000dd4 <init_RED_AMBER>:

void init_RED_AMBER() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_RED);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fa2d 	bl	8001238 <turn_on_LED>
	turn_on_LED(LED_B_AMBER);
 8000dde:	2005      	movs	r0, #5
 8000de0:	f000 fa2a 	bl	8001238 <turn_on_LED>

	turn_off_LED(LED_A_AMBER);
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 fa3d 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_A_GREEN);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 fa3a 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_RED);
 8000df0:	2004      	movs	r0, #4
 8000df2:	f000 fa37 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_GREEN);
 8000df6:	2006      	movs	r0, #6
 8000df8:	f000 fa34 	bl	8001264 <turn_off_LED>

	state_auto = RED_AMBER;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <init_RED_AMBER+0x54>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, Time_amber * SECOND);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <init_RED_AMBER+0x58>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2002      	movs	r0, #2
 8000e12:	f000 fc87 	bl	8001724 <setupTime>
	lane2 = Time_amber;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <init_RED_AMBER+0x58>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <init_RED_AMBER+0x5c>)
 8000e1c:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fcb8 	bl	8001794 <reset>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000070 	.word	0x20000070
 8000e2c:	2000002c 	.word	0x2000002c
 8000e30:	20000078 	.word	0x20000078

08000e34 <init_GREEN_RED>:

void init_GREEN_RED() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_GREEN);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f9fd 	bl	8001238 <turn_on_LED>
	turn_on_LED(LED_B_RED);
 8000e3e:	2004      	movs	r0, #4
 8000e40:	f000 f9fa 	bl	8001238 <turn_on_LED>

	turn_off_LED(LED_A_AMBER);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f000 fa0d 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_A_RED);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 fa0a 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_GREEN);
 8000e50:	2006      	movs	r0, #6
 8000e52:	f000 fa07 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_AMBER);
 8000e56:	2005      	movs	r0, #5
 8000e58:	f000 fa04 	bl	8001264 <turn_off_LED>

	state_auto = GREEN_RED;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <init_GREEN_RED+0x5c>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, Time_green * SECOND);
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <init_GREEN_RED+0x60>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fc57 	bl	8001724 <setupTime>
	lane1 = Time_green;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <init_GREEN_RED+0x60>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <init_GREEN_RED+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]
	lane2 = Time_red;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <init_GREEN_RED+0x68>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <init_GREEN_RED+0x6c>)
 8000e84:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 fc84 	bl	8001794 <reset>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000070 	.word	0x20000070
 8000e94:	20000030 	.word	0x20000030
 8000e98:	20000074 	.word	0x20000074
 8000e9c:	20000028 	.word	0x20000028
 8000ea0:	20000078 	.word	0x20000078

08000ea4 <init_AMBER_RED>:

void init_AMBER_RED() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	turn_on_LED(LED_A_AMBER);
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f000 f9c5 	bl	8001238 <turn_on_LED>
	turn_on_LED(LED_B_RED);
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f000 f9c2 	bl	8001238 <turn_on_LED>

	turn_off_LED(LED_A_RED);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 f9d5 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_A_GREEN);
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f000 f9d2 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_GREEN);
 8000ec0:	2006      	movs	r0, #6
 8000ec2:	f000 f9cf 	bl	8001264 <turn_off_LED>
	turn_off_LED(LED_B_AMBER);
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f000 f9cc 	bl	8001264 <turn_off_LED>

	state_auto = AMBER_RED;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <init_AMBER_RED+0x54>)
 8000ece:	2203      	movs	r2, #3
 8000ed0:	601a      	str	r2, [r3, #0]
	setupTime(TIME_COUNT_PROGRAM, Time_amber * SECOND);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <init_AMBER_RED+0x58>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f000 fc1f 	bl	8001724 <setupTime>
	lane1 = Time_amber;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <init_AMBER_RED+0x58>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <init_AMBER_RED+0x5c>)
 8000eec:	6013      	str	r3, [r2, #0]
	reset(ONE_SECOND);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 fc50 	bl	8001794 <reset>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000070 	.word	0x20000070
 8000efc:	2000002c 	.word	0x2000002c
 8000f00:	20000074 	.word	0x20000074

08000f04 <init_fsm_manual>:
#include "fsm_manual.h"

int temp_red, temp_green, temp_amber;
int state_manual = 0;

void init_fsm_manual(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	state_manual = RED;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <init_fsm_manual+0x44>)
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	601a      	str	r2, [r3, #0]
	init_blinkLED(state_manual);
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <init_fsm_manual+0x44>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f9d0 	bl	80012b8 <init_blinkLED>
	setupTime(TIME_COUNT_PROGRAM, 20000);
 8000f18:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f000 fc01 	bl	8001724 <setupTime>
	setupTime(ONE_SECOND, SECOND / 2);
 8000f22:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 fbfc 	bl	8001724 <setupTime>
	temp_red = Time_red;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <init_fsm_manual+0x48>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <init_fsm_manual+0x4c>)
 8000f32:	6013      	str	r3, [r2, #0]
	temp_amber = Time_amber;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <init_fsm_manual+0x50>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <init_fsm_manual+0x54>)
 8000f3a:	6013      	str	r3, [r2, #0]
	temp_green = Time_green;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <init_fsm_manual+0x58>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <init_fsm_manual+0x5c>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000007c 	.word	0x2000007c
 8000f4c:	20000028 	.word	0x20000028
 8000f50:	200000d0 	.word	0x200000d0
 8000f54:	2000002c 	.word	0x2000002c
 8000f58:	200000cc 	.word	0x200000cc
 8000f5c:	20000030 	.word	0x20000030
 8000f60:	200000d4 	.word	0x200000d4
 8000f64:	00000000 	.word	0x00000000

08000f68 <fsm_manual_run>:
void fsm_manual_run(){
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	if (actions[TIME_COUNT_PROGRAM].timer_flag == 1){
 8000f6c:	4b94      	ldr	r3, [pc, #592]	; (80011c0 <fsm_manual_run+0x258>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d105      	bne.n	8000f80 <fsm_manual_run+0x18>
		admin_mode = ACTIVE_MODE;
 8000f74:	4b93      	ldr	r3, [pc, #588]	; (80011c4 <fsm_manual_run+0x25c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
		come_back_auto();
 8000f7a:	f7ff fecd 	bl	8000d18 <come_back_auto>
		return;
 8000f7e:	e118      	b.n	80011b2 <fsm_manual_run+0x24a>
	}

	if (isSetPress()){
 8000f80:	f7ff fd6a 	bl	8000a58 <isSetPress>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8091 	beq.w	80010ae <fsm_manual_run+0x146>
		admin_mode = ACTIVE_MODE;
 8000f8c:	4b8d      	ldr	r3, [pc, #564]	; (80011c4 <fsm_manual_run+0x25c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

		switch (state_manual){
 8000f92:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <fsm_manual_run+0x260>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d007      	beq.n	8000faa <fsm_manual_run+0x42>
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	f300 8082 	bgt.w	80010a4 <fsm_manual_run+0x13c>
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d067      	beq.n	8001074 <fsm_manual_run+0x10c>
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d071      	beq.n	800108c <fsm_manual_run+0x124>
		case AMBER:
			Time_amber = temp_amber;
			Time_red = Time_green + Time_amber;
			break;
		default:
			break;
 8000fa8:	e07c      	b.n	80010a4 <fsm_manual_run+0x13c>
			if (temp_red < Time_red){
 8000faa:	4b88      	ldr	r3, [pc, #544]	; (80011cc <fsm_manual_run+0x264>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <fsm_manual_run+0x268>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	da23      	bge.n	8000ffe <fsm_manual_run+0x96>
				Time_red = temp_red;
 8000fb6:	4b85      	ldr	r3, [pc, #532]	; (80011cc <fsm_manual_run+0x264>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a85      	ldr	r2, [pc, #532]	; (80011d0 <fsm_manual_run+0x268>)
 8000fbc:	6013      	str	r3, [r2, #0]
				Time_green = ceil(Time_red * 0.6);
 8000fbe:	4b84      	ldr	r3, [pc, #528]	; (80011d0 <fsm_manual_run+0x268>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fb40 	bl	8000648 <__aeabi_i2d>
 8000fc8:	a37b      	add	r3, pc, #492	; (adr r3, 80011b8 <fsm_manual_run+0x250>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff f8bf 	bl	8000150 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f001 ffa9 	bl	8002f30 <ceil>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fc21 	bl	800082c <__aeabi_d2iz>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a79      	ldr	r2, [pc, #484]	; (80011d4 <fsm_manual_run+0x26c>)
 8000fee:	6013      	str	r3, [r2, #0]
				Time_amber = Time_red - Time_green;
 8000ff0:	4b77      	ldr	r3, [pc, #476]	; (80011d0 <fsm_manual_run+0x268>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b77      	ldr	r3, [pc, #476]	; (80011d4 <fsm_manual_run+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <fsm_manual_run+0x270>)
 8000ffc:	6013      	str	r3, [r2, #0]
			if (temp_red > Time_red){
 8000ffe:	4b73      	ldr	r3, [pc, #460]	; (80011cc <fsm_manual_run+0x264>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <fsm_manual_run+0x268>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	dd4e      	ble.n	80010a8 <fsm_manual_run+0x140>
				Time_green = Time_green + ceil((temp_red- Time_red)*0.6);
 800100a:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <fsm_manual_run+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb1a 	bl	8000648 <__aeabi_i2d>
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	4b6c      	ldr	r3, [pc, #432]	; (80011cc <fsm_manual_run+0x264>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <fsm_manual_run+0x268>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fb10 	bl	8000648 <__aeabi_i2d>
 8001028:	a363      	add	r3, pc, #396	; (adr r3, 80011b8 <fsm_manual_run+0x250>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff f88f 	bl	8000150 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f001 ff79 	bl	8002f30 <ceil>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4620      	mov	r0, r4
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff f9b3 	bl	80003b0 <__adddf3>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fbeb 	bl	800082c <__aeabi_d2iz>
 8001056:	4603      	mov	r3, r0
 8001058:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <fsm_manual_run+0x26c>)
 800105a:	6013      	str	r3, [r2, #0]
				Time_red = temp_red;
 800105c:	4b5b      	ldr	r3, [pc, #364]	; (80011cc <fsm_manual_run+0x264>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a5b      	ldr	r2, [pc, #364]	; (80011d0 <fsm_manual_run+0x268>)
 8001062:	6013      	str	r3, [r2, #0]
				Time_amber = Time_red - Time_green;
 8001064:	4b5a      	ldr	r3, [pc, #360]	; (80011d0 <fsm_manual_run+0x268>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <fsm_manual_run+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <fsm_manual_run+0x270>)
 8001070:	6013      	str	r3, [r2, #0]
			break;
 8001072:	e019      	b.n	80010a8 <fsm_manual_run+0x140>
			Time_green = temp_green;
 8001074:	4b59      	ldr	r3, [pc, #356]	; (80011dc <fsm_manual_run+0x274>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a56      	ldr	r2, [pc, #344]	; (80011d4 <fsm_manual_run+0x26c>)
 800107a:	6013      	str	r3, [r2, #0]
			Time_red = Time_green + Time_amber;
 800107c:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <fsm_manual_run+0x26c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <fsm_manual_run+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4413      	add	r3, r2
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <fsm_manual_run+0x268>)
 8001088:	6013      	str	r3, [r2, #0]
			break;
 800108a:	e00e      	b.n	80010aa <fsm_manual_run+0x142>
			Time_amber = temp_amber;
 800108c:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <fsm_manual_run+0x278>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <fsm_manual_run+0x270>)
 8001092:	6013      	str	r3, [r2, #0]
			Time_red = Time_green + Time_amber;
 8001094:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <fsm_manual_run+0x26c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <fsm_manual_run+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4413      	add	r3, r2
 800109e:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <fsm_manual_run+0x268>)
 80010a0:	6013      	str	r3, [r2, #0]
			break;
 80010a2:	e002      	b.n	80010aa <fsm_manual_run+0x142>
			break;
 80010a4:	bf00      	nop
 80010a6:	e000      	b.n	80010aa <fsm_manual_run+0x142>
			break;
 80010a8:	bf00      	nop
		}
		come_back_auto();
 80010aa:	f7ff fe35 	bl	8000d18 <come_back_auto>
	}

	if (isModePress()){
 80010ae:	f7ff fcc3 	bl	8000a38 <isModePress>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d026      	beq.n	8001106 <fsm_manual_run+0x19e>
		setupTime(ONE_SECOND, SECOND / 2);
 80010b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fb31 	bl	8001724 <setupTime>
		switch(state_manual){
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <fsm_manual_run+0x260>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d006      	beq.n	80010d8 <fsm_manual_run+0x170>
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	dc15      	bgt.n	80010fa <fsm_manual_run+0x192>
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d006      	beq.n	80010e0 <fsm_manual_run+0x178>
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d008      	beq.n	80010e8 <fsm_manual_run+0x180>
			state_manual = RED;
			admin_mode = ACTIVE_MODE;
			come_back_auto();
			return;
		default:
			break;
 80010d6:	e010      	b.n	80010fa <fsm_manual_run+0x192>
			state_manual = GREEN;
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <fsm_manual_run+0x260>)
 80010da:	2203      	movs	r2, #3
 80010dc:	601a      	str	r2, [r3, #0]
			break;
 80010de:	e00d      	b.n	80010fc <fsm_manual_run+0x194>
			state_manual = AMBER;
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <fsm_manual_run+0x260>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	601a      	str	r2, [r3, #0]
			break;
 80010e6:	e009      	b.n	80010fc <fsm_manual_run+0x194>
			state_manual = RED;
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <fsm_manual_run+0x260>)
 80010ea:	2205      	movs	r2, #5
 80010ec:	601a      	str	r2, [r3, #0]
			admin_mode = ACTIVE_MODE;
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <fsm_manual_run+0x25c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
			come_back_auto();
 80010f4:	f7ff fe10 	bl	8000d18 <come_back_auto>
			return;
 80010f8:	e05b      	b.n	80011b2 <fsm_manual_run+0x24a>
			break;
 80010fa:	bf00      	nop
		}
		init_blinkLED(state_manual);
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <fsm_manual_run+0x260>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f8d9 	bl	80012b8 <init_blinkLED>
	}
	if (isTimePress()){
 8001106:	f7ff fc9f 	bl	8000a48 <isTimePress>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01c      	beq.n	800114a <fsm_manual_run+0x1e2>
		switch(state_manual){
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <fsm_manual_run+0x260>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d006      	beq.n	8001126 <fsm_manual_run+0x1be>
 8001118:	2b05      	cmp	r3, #5
 800111a:	dc17      	bgt.n	800114c <fsm_manual_run+0x1e4>
 800111c:	2b03      	cmp	r3, #3
 800111e:	d008      	beq.n	8001132 <fsm_manual_run+0x1ca>
 8001120:	2b04      	cmp	r3, #4
 8001122:	d00c      	beq.n	800113e <fsm_manual_run+0x1d6>
 8001124:	e012      	b.n	800114c <fsm_manual_run+0x1e4>
		case RED:
			temp_red++;
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <fsm_manual_run+0x264>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <fsm_manual_run+0x264>)
 800112e:	6013      	str	r3, [r2, #0]
			break;
 8001130:	e00c      	b.n	800114c <fsm_manual_run+0x1e4>
		case GREEN:
			temp_green++;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <fsm_manual_run+0x274>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <fsm_manual_run+0x274>)
 800113a:	6013      	str	r3, [r2, #0]
			break;
 800113c:	e006      	b.n	800114c <fsm_manual_run+0x1e4>
		case AMBER:
			temp_amber++;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <fsm_manual_run+0x278>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <fsm_manual_run+0x278>)
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e000      	b.n	800114c <fsm_manual_run+0x1e4>
		}
	}
 800114a:	bf00      	nop
	if (actions[ONE_SECOND].timer_flag == 1){
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <fsm_manual_run+0x258>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <fsm_manual_run+0x1fc>
		reset(ONE_SECOND);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fb1d 	bl	8001794 <reset>
		blinkLED(state_manual);
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <fsm_manual_run+0x260>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f8f9 	bl	8001356 <blinkLED>
	}
	switch(state_manual){
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <fsm_manual_run+0x260>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d006      	beq.n	800117a <fsm_manual_run+0x212>
 800116c:	2b05      	cmp	r3, #5
 800116e:	dc1f      	bgt.n	80011b0 <fsm_manual_run+0x248>
 8001170:	2b03      	cmp	r3, #3
 8001172:	d00b      	beq.n	800118c <fsm_manual_run+0x224>
 8001174:	2b04      	cmp	r3, #4
 8001176:	d012      	beq.n	800119e <fsm_manual_run+0x236>
		break;
	case AMBER:
		update7SEG(temp_amber, temp_amber);
		break;
	default:
		break;
 8001178:	e01a      	b.n	80011b0 <fsm_manual_run+0x248>
		update7SEG(temp_red, temp_red);
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <fsm_manual_run+0x264>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <fsm_manual_run+0x264>)
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fbaf 	bl	80008e8 <update7SEG>
		break;
 800118a:	e012      	b.n	80011b2 <fsm_manual_run+0x24a>
		update7SEG(temp_green, temp_green);
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <fsm_manual_run+0x274>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <fsm_manual_run+0x274>)
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fba6 	bl	80008e8 <update7SEG>
		break;
 800119c:	e009      	b.n	80011b2 <fsm_manual_run+0x24a>
		update7SEG(temp_amber, temp_amber);
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <fsm_manual_run+0x278>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <fsm_manual_run+0x278>)
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fb9d 	bl	80008e8 <update7SEG>
		break;
 80011ae:	e000      	b.n	80011b2 <fsm_manual_run+0x24a>
		break;
 80011b0:	bf00      	nop
	}
}
 80011b2:	bdb0      	pop	{r4, r5, r7, pc}
 80011b4:	f3af 8000 	nop.w
 80011b8:	33333333 	.word	0x33333333
 80011bc:	3fe33333 	.word	0x3fe33333
 80011c0:	20000120 	.word	0x20000120
 80011c4:	20000080 	.word	0x20000080
 80011c8:	2000007c 	.word	0x2000007c
 80011cc:	200000d0 	.word	0x200000d0
 80011d0:	20000028 	.word	0x20000028
 80011d4:	20000030 	.word	0x20000030
 80011d8:	2000002c 	.word	0x2000002c
 80011dc:	200000d4 	.word	0x200000d4
 80011e0:	200000cc 	.word	0x200000cc

080011e4 <run>:
int admin_mode = 0;
int Time_red = 10;
int Time_amber = 3;
int Time_green = 7;

void run(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	switch (admin_mode){
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <run+0x50>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d01c      	beq.n	800122a <run+0x46>
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	dc1c      	bgt.n	800122e <run+0x4a>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <run+0x1a>
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d014      	beq.n	8001226 <run+0x42>
	case ACTIVE_MODE:
		fsm_auto_run();
	case MANUAL_MODE:
		fsm_manual_run();
	default:
		break;
 80011fc:	e017      	b.n	800122e <run+0x4a>
		admin_mode = ACTIVE_MODE;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <run+0x50>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
		setupTime(SYSTEM_LED, 500);
 8001204:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001208:	2000      	movs	r0, #0
 800120a:	f000 fa8b 	bl	8001724 <setupTime>
		setupTime(TIME_SEGMENT, LED_SEGMENT_CYCLE / 2);
 800120e:	2164      	movs	r1, #100	; 0x64
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fa87 	bl	8001724 <setupTime>
		setupTime(ONE_SECOND, SECOND);
 8001216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fa82 	bl	8001724 <setupTime>
		init_RED_GREEN();
 8001220:	f7ff fda0 	bl	8000d64 <init_RED_GREEN>
		break;
 8001224:	e004      	b.n	8001230 <run+0x4c>
		fsm_auto_run();
 8001226:	f7ff fd19 	bl	8000c5c <fsm_auto_run>
		fsm_manual_run();
 800122a:	f7ff fe9d 	bl	8000f68 <fsm_manual_run>
		break;
 800122e:	bf00      	nop
	}
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000080 	.word	0x20000080

08001238 <turn_on_LED>:
int state_led = 0;

uint16_t array_led_pins[] = { LED_RED_Pin, LED_A_RED_Pin, LED_A_AMBER_Pin,
		LED_A_GREEN_Pin, LED_B_RED_Pin, LED_B_AMBER_Pin, LED_B_GREEN_Pin };

void turn_on_LED(int pos) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, array_led_pins[pos], GPIO_PIN_SET);
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <turn_on_LED+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <turn_on_LED+0x28>)
 800124e:	f000 fe5a 	bl	8001f06 <HAL_GPIO_WritePin>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000034 	.word	0x20000034
 8001260:	40010800 	.word	0x40010800

08001264 <turn_off_LED>:

void turn_off_LED(int pos) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, array_led_pins[pos], GPIO_PIN_RESET);
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <turn_off_LED+0x24>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001274:	2200      	movs	r2, #0
 8001276:	4619      	mov	r1, r3
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <turn_off_LED+0x28>)
 800127a:	f000 fe44 	bl	8001f06 <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000034 	.word	0x20000034
 800128c:	40010800 	.word	0x40010800

08001290 <toggle_LED>:

void toggle_LED(int pos) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, array_led_pins[pos]);
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <toggle_LED+0x20>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <toggle_LED+0x24>)
 80012a4:	f000 fe47 	bl	8001f36 <HAL_GPIO_TogglePin>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000034 	.word	0x20000034
 80012b4:	40010800 	.word	0x40010800

080012b8 <init_blinkLED>:

void init_blinkLED(int color) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	switch (color) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d009      	beq.n	80012da <init_blinkLED+0x22>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	dc3f      	bgt.n	800134c <init_blinkLED+0x94>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d029      	beq.n	8001326 <init_blinkLED+0x6e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d013      	beq.n	8001300 <init_blinkLED+0x48>

		turn_off_LED(LED_A_AMBER);
		turn_off_LED(LED_B_AMBER);
		break;
	default:
		break;
 80012d8:	e038      	b.n	800134c <init_blinkLED+0x94>
		turn_on_LED(LED_A_RED);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff ffac 	bl	8001238 <turn_on_LED>
		turn_on_LED(LED_B_RED);
 80012e0:	2004      	movs	r0, #4
 80012e2:	f7ff ffa9 	bl	8001238 <turn_on_LED>
		turn_off_LED(LED_A_GREEN);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff ffbc 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_B_GREEN);
 80012ec:	2006      	movs	r0, #6
 80012ee:	f7ff ffb9 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_A_AMBER);
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff ffb6 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_B_AMBER);
 80012f8:	2005      	movs	r0, #5
 80012fa:	f7ff ffb3 	bl	8001264 <turn_off_LED>
		break;
 80012fe:	e026      	b.n	800134e <init_blinkLED+0x96>
		turn_on_LED(LED_A_AMBER);
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff ff99 	bl	8001238 <turn_on_LED>
		turn_on_LED(LED_B_AMBER);
 8001306:	2005      	movs	r0, #5
 8001308:	f7ff ff96 	bl	8001238 <turn_on_LED>
		turn_off_LED(LED_A_RED);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff ffa9 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_B_RED);
 8001312:	2004      	movs	r0, #4
 8001314:	f7ff ffa6 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_A_AMBER);
 8001318:	2002      	movs	r0, #2
 800131a:	f7ff ffa3 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_B_AMBER);
 800131e:	2005      	movs	r0, #5
 8001320:	f7ff ffa0 	bl	8001264 <turn_off_LED>
		break;
 8001324:	e013      	b.n	800134e <init_blinkLED+0x96>
		turn_on_LED(LED_A_GREEN);
 8001326:	2003      	movs	r0, #3
 8001328:	f7ff ff86 	bl	8001238 <turn_on_LED>
		turn_on_LED(LED_B_GREEN);
 800132c:	2006      	movs	r0, #6
 800132e:	f7ff ff83 	bl	8001238 <turn_on_LED>
		turn_off_LED(LED_A_RED);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff ff96 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_B_RED);
 8001338:	2004      	movs	r0, #4
 800133a:	f7ff ff93 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_A_AMBER);
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ff90 	bl	8001264 <turn_off_LED>
		turn_off_LED(LED_B_AMBER);
 8001344:	2005      	movs	r0, #5
 8001346:	f7ff ff8d 	bl	8001264 <turn_off_LED>
		break;
 800134a:	e000      	b.n	800134e <init_blinkLED+0x96>
		break;
 800134c:	bf00      	nop
	}
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <blinkLED>:

void blinkLED(int color) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	switch (color) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d009      	beq.n	8001378 <blinkLED+0x22>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b05      	cmp	r3, #5
 8001368:	dc1b      	bgt.n	80013a2 <blinkLED+0x4c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d011      	beq.n	8001394 <blinkLED+0x3e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d007      	beq.n	8001386 <blinkLED+0x30>
	case GREEN:
		toggle_LED(LED_A_GREEN);
		toggle_LED(LED_B_GREEN);
		break;
	default:
		break;
 8001376:	e014      	b.n	80013a2 <blinkLED+0x4c>
		toggle_LED(LED_A_RED);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff ff89 	bl	8001290 <toggle_LED>
		toggle_LED(LED_B_RED);
 800137e:	2004      	movs	r0, #4
 8001380:	f7ff ff86 	bl	8001290 <toggle_LED>
		break;
 8001384:	e00e      	b.n	80013a4 <blinkLED+0x4e>
		toggle_LED(LED_A_AMBER);
 8001386:	2002      	movs	r0, #2
 8001388:	f7ff ff82 	bl	8001290 <toggle_LED>
		toggle_LED(LED_B_AMBER);
 800138c:	2005      	movs	r0, #5
 800138e:	f7ff ff7f 	bl	8001290 <toggle_LED>
		break;
 8001392:	e007      	b.n	80013a4 <blinkLED+0x4e>
		toggle_LED(LED_A_GREEN);
 8001394:	2003      	movs	r0, #3
 8001396:	f7ff ff7b 	bl	8001290 <toggle_LED>
		toggle_LED(LED_B_GREEN);
 800139a:	2006      	movs	r0, #6
 800139c:	f7ff ff78 	bl	8001290 <toggle_LED>
		break;
 80013a0:	e000      	b.n	80013a4 <blinkLED+0x4e>
		break;
 80013a2:	bf00      	nop
	}
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b0:	f000 fa84 	bl	80018bc <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013b4:	f000 f810 	bl	80013d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013b8:	f000 f896 	bl	80014e8 <MX_GPIO_Init>
	MX_TIM2_Init();
 80013bc:	f000 f848 	bl	8001450 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <main+0x28>)
 80013c2:	f001 f9fd 	bl	80027c0 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		run();
 80013c6:	f7ff ff0d 	bl	80011e4 <run>
		HAL_Delay(5);
 80013ca:	2005      	movs	r0, #5
 80013cc:	f000 fad8 	bl	8001980 <HAL_Delay>
		run();
 80013d0:	e7f9      	b.n	80013c6 <main+0x1a>
 80013d2:	bf00      	nop
 80013d4:	200000d8 	.word	0x200000d8

080013d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b090      	sub	sp, #64	; 0x40
 80013dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	2228      	movs	r2, #40	; 0x28
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fd9a 	bl	8002f20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fe:	2301      	movs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001402:	2310      	movs	r3, #16
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fdaa 	bl	8001f68 <HAL_RCC_OscConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x46>
		Error_Handler();
 800141a:	f000 f8ef 	bl	80015fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800141e:	230f      	movs	r3, #15
 8001420:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f001 f816 	bl	8002468 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x6e>
		Error_Handler();
 8001442:	f000 f8db 	bl	80015fc <Error_Handler>
	}
}
 8001446:	bf00      	nop
 8001448:	3740      	adds	r7, #64	; 0x40
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_TIM2_Init+0x94>)
 800146e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001472:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_TIM2_Init+0x94>)
 8001476:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800147a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_TIM2_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_TIM2_Init+0x94>)
 8001484:	2263      	movs	r2, #99	; 0x63
 8001486:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_TIM2_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_TIM2_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <MX_TIM2_Init+0x94>)
 8001496:	f001 f943 	bl	8002720 <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80014a0:	f000 f8ac 	bl	80015fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_TIM2_Init+0x94>)
 80014b2:	f001 fac1 	bl	8002a38 <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80014bc:	f000 f89e 	bl	80015fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_TIM2_Init+0x94>)
 80014ce:	f001 fc99 	bl	8002e04 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80014d8:	f000 f890 	bl	80015fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000d8 	.word	0x200000d8

080014e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_GPIO_Init+0xec>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <MX_GPIO_Init+0xec>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_GPIO_Init+0xec>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_GPIO_Init+0xec>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <MX_GPIO_Init+0xec>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_GPIO_Init+0xec>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <MX_GPIO_Init+0xec>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <MX_GPIO_Init+0xec>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_GPIO_Init+0xec>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001544:	2200      	movs	r2, #0
 8001546:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800154a:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xf0>)
 800154c:	f000 fcdb 	bl	8001f06 <HAL_GPIO_WritePin>
			LED_A_RED_Pin | LED_A_AMBER_Pin | LED_A_GREEN_Pin | EN_A_Pin
					| LED_RED_Pin | LED_B_RED_Pin | LED_B_AMBER_Pin
					| LED_B_GREEN_Pin | EN_B_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001550:	2200      	movs	r2, #0
 8001552:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001556:	4821      	ldr	r0, [pc, #132]	; (80015dc <MX_GPIO_Init+0xf4>)
 8001558:	f000 fcd5 	bl	8001f06 <HAL_GPIO_WritePin>
					| Seg2_f_Pin | Seg2_g_Pin | Seg1_d_Pin | Seg1_e_Pin
					| Seg1_f_Pin | Seg1_g_Pin | Seg2_a_Pin | Seg2_b_Pin
					| Seg2_c_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Button1_Pin */
	GPIO_InitStruct.Pin = Button1_Pin;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4619      	mov	r1, r3
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_GPIO_Init+0xf8>)
 8001572:	f000 fb37 	bl	8001be4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_A_RED_Pin LED_A_AMBER_Pin LED_A_GREEN_Pin EN_A_Pin
	 LED_RED_Pin LED_B_RED_Pin LED_B_AMBER_Pin LED_B_GREEN_Pin
	 EN_B_Pin */
	GPIO_InitStruct.Pin = LED_A_RED_Pin | LED_A_AMBER_Pin | LED_A_GREEN_Pin
 8001576:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800157a:	613b      	str	r3, [r7, #16]
			| EN_A_Pin | LED_RED_Pin | LED_B_RED_Pin | LED_B_AMBER_Pin
			| LED_B_GREEN_Pin | EN_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2302      	movs	r3, #2
 8001586:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001590:	f000 fb28 	bl	8001be4 <HAL_GPIO_Init>

	/*Configure GPIO pins : Seg1_a_Pin Seg1_b_Pin Seg1_c_Pin Seg2_d_Pin
	 Seg2_e_Pin Seg2_f_Pin Seg2_g_Pin Seg1_d_Pin
	 Seg1_e_Pin Seg1_f_Pin Seg1_g_Pin Seg2_a_Pin
	 Seg2_b_Pin Seg2_c_Pin */
	GPIO_InitStruct.Pin = Seg1_a_Pin | Seg1_b_Pin | Seg1_c_Pin | Seg2_d_Pin
 8001594:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001598:	613b      	str	r3, [r7, #16]
			| Seg2_e_Pin | Seg2_f_Pin | Seg2_g_Pin | Seg1_d_Pin | Seg1_e_Pin
			| Seg1_f_Pin | Seg1_g_Pin | Seg2_a_Pin | Seg2_b_Pin | Seg2_c_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <MX_GPIO_Init+0xf4>)
 80015ae:	f000 fb19 	bl	8001be4 <HAL_GPIO_Init>

	/*Configure GPIO pins : MODE_Pin TIME_Pin SET_Pin */
	GPIO_InitStruct.Pin = MODE_Pin | TIME_Pin | SET_Pin;
 80015b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_GPIO_Init+0xf0>)
 80015c8:	f000 fb0c 	bl	8001be4 <HAL_GPIO_Init>

}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000

080015e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80015ec:	f7ff fa3c 	bl	8000a68 <getKeyInput>
	timerRun();
 80015f0:	f000 f8f6 	bl	80017e0 <timerRun>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d113      	bne.n	80016a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_TIM_Base_MspInit+0x44>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_TIM_Base_MspInit+0x44>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_TIM_Base_MspInit+0x44>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	201c      	movs	r0, #28
 800169c:	f000 fa6b 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a0:	201c      	movs	r0, #28
 80016a2:	f000 fa84 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fa:	f000 f925 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <TIM2_IRQHandler+0x10>)
 800170a:	f001 f8a5 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000d8 	.word	0x200000d8

08001718 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <setupTime>:

#include <timer.h>

detail_time actions[NUMBER_OF_ACTIONS];

void setupTime(int index, int duration) {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	actions[index].time = duration / TIMER_CYCLE;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <setupTime+0x68>)
 8001732:	fb82 1203 	smull	r1, r2, r2, r3
 8001736:	1152      	asrs	r2, r2, #5
 8001738:	17db      	asrs	r3, r3, #31
 800173a:	1ad1      	subs	r1, r2, r3
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <setupTime+0x6c>)
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4403      	add	r3, r0
 800174a:	6019      	str	r1, [r3, #0]
	actions[index].timer_counter = duration / TIMER_CYCLE;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <setupTime+0x68>)
 8001750:	fb82 1203 	smull	r1, r2, r2, r3
 8001754:	1152      	asrs	r2, r2, #5
 8001756:	17db      	asrs	r3, r3, #31
 8001758:	1ad1      	subs	r1, r2, r3
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <setupTime+0x6c>)
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4403      	add	r3, r0
 8001768:	3304      	adds	r3, #4
 800176a:	6019      	str	r1, [r3, #0]
	actions[index].timer_flag = 0;
 800176c:	4908      	ldr	r1, [pc, #32]	; (8001790 <setupTime+0x6c>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3308      	adds	r3, #8
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	51eb851f 	.word	0x51eb851f
 8001790:	20000120 	.word	0x20000120

08001794 <reset>:

void reset(int index) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	actions[index].timer_counter = actions[index].time;
 800179c:	490f      	ldr	r1, [pc, #60]	; (80017dc <reset+0x48>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <reset+0x48>)
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4403      	add	r3, r0
 80017ba:	3304      	adds	r3, #4
 80017bc:	6019      	str	r1, [r3, #0]
	actions[index].timer_flag = 0;
 80017be:	4907      	ldr	r1, [pc, #28]	; (80017dc <reset+0x48>)
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3308      	adds	r3, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000120 	.word	0x20000120

080017e0 <timerRun>:

void timerRun() {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_ACTIONS; i++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	e035      	b.n	8001858 <timerRun+0x78>
		if (actions[i].timer_counter > 0) {
 80017ec:	491f      	ldr	r1, [pc, #124]	; (800186c <timerRun+0x8c>)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dd27      	ble.n	8001852 <timerRun+0x72>
			actions[i].timer_counter--;
 8001802:	491a      	ldr	r1, [pc, #104]	; (800186c <timerRun+0x8c>)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3304      	adds	r3, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	4815      	ldr	r0, [pc, #84]	; (800186c <timerRun+0x8c>)
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4403      	add	r3, r0
 8001824:	3304      	adds	r3, #4
 8001826:	6019      	str	r1, [r3, #0]
			if (actions[i].timer_counter <= 0) {
 8001828:	4910      	ldr	r1, [pc, #64]	; (800186c <timerRun+0x8c>)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	dc09      	bgt.n	8001852 <timerRun+0x72>
				actions[i].timer_flag = 1;
 800183e:	490b      	ldr	r1, [pc, #44]	; (800186c <timerRun+0x8c>)
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	3308      	adds	r3, #8
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_ACTIONS; i++) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b09      	cmp	r3, #9
 800185c:	ddc6      	ble.n	80017ec <timerRun+0xc>
			}
		}
	}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000120 	.word	0x20000120

08001870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001870:	f7ff ff52 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001876:	490c      	ldr	r1, [pc, #48]	; (80018a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001878:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800188c:	4c09      	ldr	r4, [pc, #36]	; (80018b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f001 fb1d 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189e:	f7ff fd85 	bl	80013ac <main>
  bx lr
 80018a2:	4770      	bx	lr
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80018ac:	080030bc 	.word	0x080030bc
  ldr r2, =_sbss
 80018b0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80018b4:	2000019c 	.word	0x2000019c

080018b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_2_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x28>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f947 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fe96 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40022000 	.word	0x40022000

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f95f 	bl	8001bca <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f927 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000044 	.word	0x20000044
 8001940:	2000004c 	.word	0x2000004c
 8001944:	20000048 	.word	0x20000048

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x20>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_IncTick+0x20>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	2000004c 	.word	0x2000004c
 8001968:	20000198 	.word	0x20000198

0800196c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000198 	.word	0x20000198

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fff0 	bl	800196c <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffe0 	bl	800196c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000004c 	.word	0x2000004c

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <__NVIC_EnableIRQ+0x34>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff90 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff2d 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff42 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff90 	bl	8001ab8 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5f 	bl	8001a64 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff35 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b08b      	sub	sp, #44	; 0x2c
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e148      	b.n	8001e8a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8137 	bne.w	8001e84 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4aa3      	ldr	r2, [pc, #652]	; (8001ea8 <HAL_GPIO_Init+0x2c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d05e      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c20:	4aa1      	ldr	r2, [pc, #644]	; (8001ea8 <HAL_GPIO_Init+0x2c4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d875      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c26:	4aa1      	ldr	r2, [pc, #644]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d058      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c2c:	4a9f      	ldr	r2, [pc, #636]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d86f      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c32:	4a9f      	ldr	r2, [pc, #636]	; (8001eb0 <HAL_GPIO_Init+0x2cc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d052      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c38:	4a9d      	ldr	r2, [pc, #628]	; (8001eb0 <HAL_GPIO_Init+0x2cc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d869      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c3e:	4a9d      	ldr	r2, [pc, #628]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d04c      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c44:	4a9b      	ldr	r2, [pc, #620]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d863      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c4a:	4a9b      	ldr	r2, [pc, #620]	; (8001eb8 <HAL_GPIO_Init+0x2d4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d046      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c50:	4a99      	ldr	r2, [pc, #612]	; (8001eb8 <HAL_GPIO_Init+0x2d4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d85d      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d82a      	bhi.n	8001cb0 <HAL_GPIO_Init+0xcc>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d859      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <HAL_GPIO_Init+0x80>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001cdf 	.word	0x08001cdf
 8001c68:	08001cb9 	.word	0x08001cb9
 8001c6c:	08001ccb 	.word	0x08001ccb
 8001c70:	08001d0d 	.word	0x08001d0d
 8001c74:	08001d13 	.word	0x08001d13
 8001c78:	08001d13 	.word	0x08001d13
 8001c7c:	08001d13 	.word	0x08001d13
 8001c80:	08001d13 	.word	0x08001d13
 8001c84:	08001d13 	.word	0x08001d13
 8001c88:	08001d13 	.word	0x08001d13
 8001c8c:	08001d13 	.word	0x08001d13
 8001c90:	08001d13 	.word	0x08001d13
 8001c94:	08001d13 	.word	0x08001d13
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001d13 	.word	0x08001d13
 8001ca0:	08001d13 	.word	0x08001d13
 8001ca4:	08001d13 	.word	0x08001d13
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cd5 	.word	0x08001cd5
 8001cb0:	4a82      	ldr	r2, [pc, #520]	; (8001ebc <HAL_GPIO_Init+0x2d8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb6:	e02c      	b.n	8001d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e029      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e024      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	3308      	adds	r3, #8
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e01f      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	330c      	adds	r3, #12
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e01a      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e013      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	611a      	str	r2, [r3, #16]
          break;
 8001cfe:	e009      	b.n	8001d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d00:	2308      	movs	r3, #8
 8001d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	615a      	str	r2, [r3, #20]
          break;
 8001d0a:	e003      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          break;
 8001d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d801      	bhi.n	8001d1e <HAL_GPIO_Init+0x13a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_Init+0x13e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d802      	bhi.n	8001d30 <HAL_GPIO_Init+0x14c>
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x152>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	3b08      	subs	r3, #8
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	6a39      	ldr	r1, [r7, #32]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8090 	beq.w	8001e84 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <HAL_GPIO_Init+0x2dc>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a55      	ldr	r2, [pc, #340]	; (8001ec0 <HAL_GPIO_Init+0x2dc>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_GPIO_Init+0x2dc>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <HAL_GPIO_Init+0x1dc>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a47      	ldr	r2, [pc, #284]	; (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_GPIO_Init+0x1d8>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e004      	b.n	8001dc6 <HAL_GPIO_Init+0x1e2>
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e002      	b.n	8001dc6 <HAL_GPIO_Init+0x1e2>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_GPIO_Init+0x1e2>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	f002 0203 	and.w	r2, r2, #3
 8001dcc:	0092      	lsls	r2, r2, #2
 8001dce:	4093      	lsls	r3, r2
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd6:	493b      	ldr	r1, [pc, #236]	; (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dfe:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4933      	ldr	r1, [pc, #204]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4923      	ldr	r1, [pc, #140]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	491f      	ldr	r1, [pc, #124]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4919      	ldr	r1, [pc, #100]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4915      	ldr	r1, [pc, #84]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3301      	adds	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f aeaf 	bne.w	8001bf8 <HAL_GPIO_Init+0x14>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	372c      	adds	r7, #44	; 0x2c
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	10320000 	.word	0x10320000
 8001eac:	10310000 	.word	0x10310000
 8001eb0:	10220000 	.word	0x10220000
 8001eb4:	10210000 	.word	0x10210000
 8001eb8:	10120000 	.word	0x10120000
 8001ebc:	10110000 	.word	0x10110000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]
 8001f12:	4613      	mov	r3, r2
 8001f14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f16:	787b      	ldrb	r3, [r7, #1]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1c:	887a      	ldrh	r2, [r7, #2]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f22:	e003      	b.n	8001f2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	041a      	lsls	r2, r3, #16
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	611a      	str	r2, [r3, #16]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f48:	887a      	ldrh	r2, [r7, #2]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	041a      	lsls	r2, r3, #16
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	400b      	ands	r3, r1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e26c      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00c      	beq.n	8001fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f94:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d112      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d10b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d06c      	beq.n	8002094 <HAL_RCC_OscConfig+0x12c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d168      	bne.n	8002094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e246      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x76>
 8001fd0:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e02e      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xbc>
 800200a:	4b72      	ldr	r3, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a71      	ldr	r2, [pc, #452]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002024:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fc92 	bl	800196c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fc8e 	bl	800196c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1fa      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xe4>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fc7e 	bl	800196c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff fc7a 	bl	800196c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1e6      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x10c>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1ba      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4939      	ldr	r1, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff fc33 	bl	800196c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff fc2f 	bl	800196c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e19b      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4927      	ldr	r1, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fc12 	bl	800196c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff fc0e 	bl	800196c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e17a      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03a      	beq.n	80021ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7ff fbf2 	bl	800196c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7ff fbee 	bl	800196c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e15a      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 fa9a 	bl	80026e4 <RCC_Delay>
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7ff fbd8 	bl	800196c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff fbd4 	bl	800196c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d908      	bls.n	80021e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e140      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	42420000 	.word	0x42420000
 80021dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b9e      	ldr	r3, [pc, #632]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e9      	bne.n	80021c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a6 	beq.w	8002346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b97      	ldr	r3, [pc, #604]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b94      	ldr	r3, [pc, #592]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a93      	ldr	r2, [pc, #588]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b91      	ldr	r3, [pc, #580]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b8e      	ldr	r3, [pc, #568]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b8b      	ldr	r3, [pc, #556]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a8a      	ldr	r2, [pc, #552]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7ff fb95 	bl	800196c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7ff fb91 	bl	800196c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0fd      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b81      	ldr	r3, [pc, #516]	; (8002460 <HAL_RCC_OscConfig+0x4f8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x312>
 800226c:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x334>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a72      	ldr	r2, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	e01c      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d10c      	bne.n	80022be <HAL_RCC_OscConfig+0x356>
 80022a4:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a69      	ldr	r2, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e00b      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a66      	ldr	r2, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a63      	ldr	r2, [pc, #396]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff fb45 	bl	800196c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff fb41 	bl	800196c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0ab      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCC_OscConfig+0x37e>
 8002308:	e014      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7ff fb2f 	bl	800196c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7ff fb2b 	bl	800196c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e095      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b48      	ldr	r3, [pc, #288]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8081 	beq.w	8002452 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d061      	beq.n	8002420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d146      	bne.n	80023f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_OscConfig+0x4fc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff faff 	bl	800196c <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff fafb 	bl	800196c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e067      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d108      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	492d      	ldr	r1, [pc, #180]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a19      	ldr	r1, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	430b      	orrs	r3, r1
 80023be:	4927      	ldr	r1, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x4fc>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff facf 	bl	800196c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff facb 	bl	800196c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e037      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46a>
 80023f0:	e02f      	b.n	8002452 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_RCC_OscConfig+0x4fc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fab8 	bl	800196c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff fab4 	bl	800196c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e020      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x498>
 800241e:	e018      	b.n	8002452 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e013      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x4f4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	429a      	cmp	r2, r3
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	42420060 	.word	0x42420060

08002468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d0      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4965      	ldr	r1, [pc, #404]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d040      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d115      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e073      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4936      	ldr	r1, [pc, #216]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7ff fa08 	bl	800196c <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7ff fa04 	bl	800196c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e053      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d210      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f821 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1cc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1d0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f966 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	08003090 	.word	0x08003090
 8002634:	20000044 	.word	0x20000044
 8002638:	20000048 	.word	0x20000048

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x36>
 800266a:	e027      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	e027      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800269e:	fb02 f203 	mul.w	r2, r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	693b      	ldr	r3, [r7, #16]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200
 80026d8:	080030a0 	.word	0x080030a0
 80026dc:	080030b0 	.word	0x080030b0
 80026e0:	003d0900 	.word	0x003d0900

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000044 	.word	0x20000044
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe ff90 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fa56 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e035      	b.n	8002844 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_TIM_Base_Start_IT+0x90>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_TIM_Base_Start_IT+0x4e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d004      	beq.n	800280e <HAL_TIM_Base_Start_IT+0x4e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_TIM_Base_Start_IT+0x94>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d010      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002830:	e007      	b.n	8002842 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400

08002858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d020      	beq.n	80028bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0202 	mvn.w	r2, #2
 800288c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f998 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f98b 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f99a 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f972 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f965 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f974 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d020      	beq.n	8002954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0208 	mvn.w	r2, #8
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f94c 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f93f 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f94e 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0210 	mvn.w	r2, #16
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2208      	movs	r2, #8
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f926 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f919 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f928 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0201 	mvn.w	r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fe10 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fa6f 	bl	8002ec6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8f8 	bl	8002bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0220 	mvn.w	r2, #32
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa42 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e0b4      	b.n	8002bbe <HAL_TIM_ConfigClockSource+0x186>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8c:	d03e      	beq.n	8002b0c <HAL_TIM_ConfigClockSource+0xd4>
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	f200 8087 	bhi.w	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9a:	f000 8086 	beq.w	8002baa <HAL_TIM_ConfigClockSource+0x172>
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d87f      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b70      	cmp	r3, #112	; 0x70
 8002aa6:	d01a      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0xa6>
 8002aa8:	2b70      	cmp	r3, #112	; 0x70
 8002aaa:	d87b      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b60      	cmp	r3, #96	; 0x60
 8002aae:	d050      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x11a>
 8002ab0:	2b60      	cmp	r3, #96	; 0x60
 8002ab2:	d877      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b50      	cmp	r3, #80	; 0x50
 8002ab6:	d03c      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0xfa>
 8002ab8:	2b50      	cmp	r3, #80	; 0x50
 8002aba:	d873      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d058      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x13a>
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d86f      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d064      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	2b30      	cmp	r3, #48	; 0x30
 8002aca:	d86b      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d060      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d867      	bhi.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05c      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d05a      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	e062      	b.n	8002ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6899      	ldr	r1, [r3, #8]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f000 f96a 	bl	8002dc6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
      break;
 8002b0a:	e04f      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f000 f953 	bl	8002dc6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2e:	609a      	str	r2, [r3, #8]
      break;
 8002b30:	e03c      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 f8ca 	bl	8002cd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2150      	movs	r1, #80	; 0x50
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f921 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 8002b50:	e02c      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f000 f8e8 	bl	8002d34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2160      	movs	r1, #96	; 0x60
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f911 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 8002b70:	e01c      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f000 f8aa 	bl	8002cd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2140      	movs	r1, #64	; 0x40
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f901 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 8002b90:	e00c      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f000 f8f8 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 8002ba2:	e003      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e000      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <TIM_Base_SetConfig+0xc0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0x28>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0x28>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <TIM_Base_SetConfig+0xc4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <TIM_Base_SetConfig+0xc0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <TIM_Base_SetConfig+0x52>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0x52>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <TIM_Base_SetConfig+0xc4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <TIM_Base_SetConfig+0xc0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d103      	bne.n	8002ca8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f023 0201 	bic.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	40012c00 	.word	0x40012c00
 8002cd4:	40000400 	.word	0x40000400

08002cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f023 0201 	bic.w	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f023 030a 	bic.w	r3, r3, #10
 8002d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0210 	bic.w	r2, r3, #16
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	021a      	lsls	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	609a      	str	r2, [r3, #8]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e041      	b.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a14      	ldr	r2, [pc, #80]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d004      	beq.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10c      	bne.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	2600      	movs	r6, #0
 8002edc:	4d0c      	ldr	r5, [pc, #48]	; (8002f10 <__libc_init_array+0x38>)
 8002ede:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	f000 f8a2 	bl	8003030 <_init>
 8002eec:	2600      	movs	r6, #0
 8002eee:	4d0a      	ldr	r5, [pc, #40]	; (8002f18 <__libc_init_array+0x40>)
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	; (8002f1c <__libc_init_array+0x44>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	080030b4 	.word	0x080030b4
 8002f14:	080030b4 	.word	0x080030b4
 8002f18:	080030b4 	.word	0x080030b4
 8002f1c:	080030b8 	.word	0x080030b8

08002f20 <memset>:
 8002f20:	4603      	mov	r3, r0
 8002f22:	4402      	add	r2, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <ceil>:
 8002f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f34:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8002f38:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8002f3c:	2e13      	cmp	r6, #19
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4607      	mov	r7, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	4605      	mov	r5, r0
 8002f48:	dc31      	bgt.n	8002fae <ceil+0x7e>
 8002f4a:	2e00      	cmp	r6, #0
 8002f4c:	da12      	bge.n	8002f74 <ceil+0x44>
 8002f4e:	a334      	add	r3, pc, #208	; (adr r3, 8003020 <ceil+0xf0>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fa2c 	bl	80003b0 <__adddf3>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f7fd fc5c 	bl	8000818 <__aeabi_dcmpgt>
 8002f60:	b128      	cbz	r0, 8002f6e <ceil+0x3e>
 8002f62:	2c00      	cmp	r4, #0
 8002f64:	db56      	blt.n	8003014 <ceil+0xe4>
 8002f66:	433c      	orrs	r4, r7
 8002f68:	d058      	beq.n	800301c <ceil+0xec>
 8002f6a:	2500      	movs	r5, #0
 8002f6c:	4c2e      	ldr	r4, [pc, #184]	; (8003028 <ceil+0xf8>)
 8002f6e:	4623      	mov	r3, r4
 8002f70:	462f      	mov	r7, r5
 8002f72:	e025      	b.n	8002fc0 <ceil+0x90>
 8002f74:	4a2d      	ldr	r2, [pc, #180]	; (800302c <ceil+0xfc>)
 8002f76:	fa42 f806 	asr.w	r8, r2, r6
 8002f7a:	ea01 0208 	and.w	r2, r1, r8
 8002f7e:	4302      	orrs	r2, r0
 8002f80:	d01e      	beq.n	8002fc0 <ceil+0x90>
 8002f82:	a327      	add	r3, pc, #156	; (adr r3, 8003020 <ceil+0xf0>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fa12 	bl	80003b0 <__adddf3>
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f7fd fc42 	bl	8000818 <__aeabi_dcmpgt>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d0ea      	beq.n	8002f6e <ceil+0x3e>
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	bfc2      	ittt	gt
 8002f9c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8002fa0:	fa43 f606 	asrgt.w	r6, r3, r6
 8002fa4:	19a4      	addgt	r4, r4, r6
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	ea24 0408 	bic.w	r4, r4, r8
 8002fac:	e7df      	b.n	8002f6e <ceil+0x3e>
 8002fae:	2e33      	cmp	r6, #51	; 0x33
 8002fb0:	dd0a      	ble.n	8002fc8 <ceil+0x98>
 8002fb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002fb6:	d103      	bne.n	8002fc0 <ceil+0x90>
 8002fb8:	f7fd f9fa 	bl	80003b0 <__adddf3>
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8002fd0:	fa22 f808 	lsr.w	r8, r2, r8
 8002fd4:	ea18 0f00 	tst.w	r8, r0
 8002fd8:	d0f2      	beq.n	8002fc0 <ceil+0x90>
 8002fda:	a311      	add	r3, pc, #68	; (adr r3, 8003020 <ceil+0xf0>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd f9e6 	bl	80003b0 <__adddf3>
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f7fd fc16 	bl	8000818 <__aeabi_dcmpgt>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d0be      	beq.n	8002f6e <ceil+0x3e>
 8002ff0:	2c00      	cmp	r4, #0
 8002ff2:	dd02      	ble.n	8002ffa <ceil+0xca>
 8002ff4:	2e14      	cmp	r6, #20
 8002ff6:	d103      	bne.n	8003000 <ceil+0xd0>
 8002ff8:	3401      	adds	r4, #1
 8002ffa:	ea25 0508 	bic.w	r5, r5, r8
 8002ffe:	e7b6      	b.n	8002f6e <ceil+0x3e>
 8003000:	2301      	movs	r3, #1
 8003002:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003006:	fa03 f606 	lsl.w	r6, r3, r6
 800300a:	4435      	add	r5, r6
 800300c:	42bd      	cmp	r5, r7
 800300e:	bf38      	it	cc
 8003010:	18e4      	addcc	r4, r4, r3
 8003012:	e7f2      	b.n	8002ffa <ceil+0xca>
 8003014:	2500      	movs	r5, #0
 8003016:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800301a:	e7a8      	b.n	8002f6e <ceil+0x3e>
 800301c:	4625      	mov	r5, r4
 800301e:	e7a6      	b.n	8002f6e <ceil+0x3e>
 8003020:	8800759c 	.word	0x8800759c
 8003024:	7e37e43c 	.word	0x7e37e43c
 8003028:	3ff00000 	.word	0x3ff00000
 800302c:	000fffff 	.word	0x000fffff

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
